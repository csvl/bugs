<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="/media/kdam/Data/UCL/code/Project2/Project2/samples/search/search.c" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:19">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:19">&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:19">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:19">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:17">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:17">&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="5:1" pos:end="5:19">#<cpp:directive pos:start="5:2" pos:end="5:8">include</cpp:directive> <cpp:file pos:start="5:10" pos:end="5:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<decl_stmt pos:start="6:1" pos:end="6:7"><decl pos:start="6:1" pos:end="6:6"><type pos:start="6:1" pos:end="6:3"><name pos:start="6:1" pos:end="6:3">int</name></type> <name pos:start="6:5" pos:end="6:6">gt</name></decl>;</decl_stmt>
<function pos:start="7:1" pos:end="23:1"><type pos:start="7:1" pos:end="7:3"><name pos:start="7:1" pos:end="7:3">int</name></type> <name pos:start="7:5" pos:end="7:10">search</name><parameter_list pos:start="7:11" pos:end="7:41">(<parameter pos:start="7:12" pos:end="7:20"><decl pos:start="7:12" pos:end="7:20"><type pos:start="7:12" pos:end="7:18"><name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:18">arr</name><index pos:start="7:19" pos:end="7:20">[]</index></name></decl></parameter>, <parameter pos:start="7:23" pos:end="7:30"><decl pos:start="7:23" pos:end="7:30"><type pos:start="7:23" pos:end="7:30"><name pos:start="7:23" pos:end="7:25">int</name></type> <name pos:start="7:27" pos:end="7:30">size</name></decl></parameter>, <parameter pos:start="7:33" pos:end="7:40"><decl pos:start="7:33" pos:end="7:40"><type pos:start="7:33" pos:end="7:40"><name pos:start="7:33" pos:end="7:35">int</name></type> <name pos:start="7:37" pos:end="7:40">elem</name></decl></parameter>)</parameter_list>
<block pos:start="8:1" pos:end="23:1">{<block_content pos:start="9:5" pos:end="22:14">
    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">l</name> <init pos:start="9:11" pos:end="9:13">= <expr pos:start="9:13" pos:end="9:13"><literal type="number" pos:start="9:13" pos:end="9:13">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:17"><decl pos:start="10:5" pos:end="10:16"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:9">r</name> <init pos:start="10:11" pos:end="10:16">= <expr pos:start="10:13" pos:end="10:16"><name>size</name><operator>-</operator><literal>1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">m</name></decl>;</decl_stmt>
    <while pos:start="12:5" pos:end="21:5">while <condition pos:start="12:11" pos:end="12:17">(<expr pos:start="12:12" pos:end="12:16"><name pos:start="12:12" pos:end="12:12">r</name><operator pos:start="12:13" pos:end="12:14">&gt;=</operator> <name pos:start="12:16" pos:end="12:16">l</name></expr>)</condition> <block pos:start="12:19" pos:end="21:5">{<block_content pos:start="13:9" pos:end="20:9">
        <expr_stmt pos:start="13:9" pos:end="13:24"><expr pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:9">m</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <operator pos:start="13:13" pos:end="13:13">(</operator><name pos:start="13:14" pos:end="13:14">r</name> <operator pos:start="13:16" pos:end="13:16">+</operator> <name pos:start="13:18" pos:end="13:18">l</name><operator pos:start="13:19" pos:end="13:19">)</operator> <operator pos:start="13:21" pos:end="13:21">/</operator> <literal type="number" pos:start="13:23" pos:end="13:23">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="14:9" pos:end="20:9"><if pos:start="14:9" pos:end="16:9">if <condition pos:start="14:12" pos:end="14:27">(<expr pos:start="14:13" pos:end="14:26"><name pos:start="14:13" pos:end="14:18"><name pos:start="14:13" pos:end="14:15">arr</name><index pos:start="14:16" pos:end="14:18">[<expr pos:start="14:17" pos:end="14:17"><name pos:start="14:17" pos:end="14:17">m</name></expr>]</index></name> <operator pos:start="14:20" pos:end="14:21">==</operator> <name pos:start="14:23" pos:end="14:26">elem</name></expr>)</condition> <block pos:start="14:29" pos:end="16:9">{<block_content pos:start="15:13" pos:end="15:21">	
            <return pos:start="15:13" pos:end="15:21">return <expr pos:start="15:20" pos:end="15:20"><name pos:start="15:20" pos:end="15:20">m</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif" pos:start="16:11" pos:end="18:9">else if <condition pos:start="16:19" pos:end="16:33">(<expr pos:start="16:20" pos:end="16:32"><name pos:start="16:20" pos:end="16:25"><name pos:start="16:20" pos:end="16:22">arr</name><index pos:start="16:23" pos:end="16:25">[<expr pos:start="16:24" pos:end="16:24"><name pos:start="16:24" pos:end="16:24">m</name></expr>]</index></name> <operator pos:start="16:27" pos:end="16:27">&gt;</operator> <name pos:start="16:29" pos:end="16:32">elem</name></expr>)</condition> <block pos:start="16:35" pos:end="18:9">{<block_content pos:start="17:13" pos:end="17:22">
            <expr_stmt pos:start="17:13" pos:end="17:22"><expr pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:13">r</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:17">m</name> <operator pos:start="17:19" pos:end="17:19">-</operator> <literal type="number" pos:start="17:21" pos:end="17:21">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="18:11" pos:end="20:9">else <block pos:start="18:16" pos:end="20:9">{<block_content pos:start="19:13" pos:end="19:22">
            <expr_stmt pos:start="19:13" pos:end="19:22"><expr pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:13">l</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:17">m</name> <operator pos:start="19:19" pos:end="19:19">+</operator> <literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <return pos:start="22:5" pos:end="22:14">return <expr pos:start="22:12" pos:end="22:13"><operator pos:start="22:12" pos:end="22:12">-</operator><literal type="number" pos:start="22:13" pos:end="22:13">1</literal></expr>;</return>
</block_content>}</block></function>



<comment type="block" pos:start="27:1" pos:end="31:3">/* "Classical Unit test 01"
 * With a unit test this will always looks like a success, because the program
 * will always find 2. Because 2 is a the beginning of the table, the algorithm
 * will not go out of bounds. So in this example, nothing is going to go wrong. 
 */</comment>
<function pos:start="32:1" pos:end="37:1"><type pos:start="32:1" pos:end="32:4"><name pos:start="32:1" pos:end="32:4">void</name></type> <name pos:start="32:6" pos:end="32:22">classical_test_01</name><parameter_list pos:start="32:23" pos:end="32:24">()</parameter_list> <block pos:start="32:26" pos:end="37:1">{<block_content pos:start="33:5" pos:end="36:19">
    <decl_stmt pos:start="33:5" pos:end="33:35"><decl pos:start="33:5" pos:end="33:34"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:11">tab</name><index pos:start="33:12" pos:end="33:14">[<expr pos:start="33:13" pos:end="33:13"><literal type="number" pos:start="33:13" pos:end="33:13">8</literal></expr>]</index></name> <init pos:start="33:16" pos:end="33:34">= <expr pos:start="33:18" pos:end="33:34"><block pos:start="33:18" pos:end="33:34">{<expr pos:start="33:19" pos:end="33:19"><literal type="number" pos:start="33:19" pos:end="33:19">1</literal></expr>,<expr pos:start="33:21" pos:end="33:21"><literal type="number" pos:start="33:21" pos:end="33:21">2</literal></expr>,<expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">3</literal></expr>,<expr pos:start="33:25" pos:end="33:25"><literal type="number" pos:start="33:25" pos:end="33:25">4</literal></expr>,<expr pos:start="33:27" pos:end="33:27"><literal type="number" pos:start="33:27" pos:end="33:27">5</literal></expr>,<expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">6</literal></expr>,<expr pos:start="33:31" pos:end="33:31"><literal type="number" pos:start="33:31" pos:end="33:31">7</literal></expr>,<expr pos:start="33:33" pos:end="33:33"><literal type="number" pos:start="33:33" pos:end="33:33">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:55"><decl pos:start="35:5" pos:end="35:54"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name> <init pos:start="35:11" pos:end="35:54">= <expr pos:start="35:13" pos:end="35:54"><call pos:start="35:13" pos:end="35:54"><name pos:start="35:13" pos:end="35:18">search</name><argument_list pos:start="35:19" pos:end="35:54">(<argument pos:start="35:20" pos:end="35:22"><expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">tab</name></expr></argument>, <argument pos:start="35:25" pos:end="35:50"><expr pos:start="35:25" pos:end="35:50"><sizeof pos:start="35:25" pos:end="35:35">sizeof<argument_list pos:start="35:31" pos:end="35:35">(<argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">tab</name></expr></argument>)</argument_list></sizeof><operator pos:start="35:36" pos:end="35:36">/</operator><sizeof pos:start="35:37" pos:end="35:50">sizeof<argument_list pos:start="35:43" pos:end="35:50">(<argument pos:start="35:44" pos:end="35:49"><expr pos:start="35:44" pos:end="35:49"><name pos:start="35:44" pos:end="35:49"><name pos:start="35:44" pos:end="35:46">tab</name><index pos:start="35:47" pos:end="35:49">[<expr pos:start="35:48" pos:end="35:48"><literal type="number" pos:start="35:48" pos:end="35:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:53" pos:end="35:53"><expr pos:start="35:53" pos:end="35:53"><literal type="number" pos:start="35:53" pos:end="35:53">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:19"><expr pos:start="36:5" pos:end="36:18"><call pos:start="36:5" pos:end="36:18"><name pos:start="36:5" pos:end="36:10">assert</name><argument_list pos:start="36:11" pos:end="36:18">(<argument pos:start="36:12" pos:end="36:17"><expr pos:start="36:12" pos:end="36:17"><name pos:start="36:12" pos:end="36:12">i</name> <operator pos:start="36:14" pos:end="36:15">==</operator> <literal type="number" pos:start="36:17" pos:end="36:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="39:1" pos:end="47:3">/* "Classical Unit test 02"
 * With a unit test this will always looks like a success, because the program
 * will always return -1 because 100 is not in the table. However, due to the 
 * bug and the fact that the value we're looking for is bigger than the biggest
 * value in the table, the algorithm will go out of bounds (up to size, 8 in
 * this case). Because the value we're looking for is *most probably* not in
 * the memoery directly following the tab, the unit test will not return -1. 
 * The bug will then go unnoticed from the unit test.
 */</comment>
<function pos:start="48:1" pos:end="53:1"><type pos:start="48:1" pos:end="48:4"><name pos:start="48:1" pos:end="48:4">void</name></type> <name pos:start="48:6" pos:end="48:22">classical_test_02</name><parameter_list pos:start="48:23" pos:end="48:24">()</parameter_list> <block pos:start="48:26" pos:end="53:1">{<block_content pos:start="49:5" pos:end="52:20">
    <decl_stmt pos:start="49:5" pos:end="49:35"><decl pos:start="49:5" pos:end="49:34"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:11">tab</name><index pos:start="49:12" pos:end="49:14">[<expr pos:start="49:13" pos:end="49:13"><literal type="number" pos:start="49:13" pos:end="49:13">8</literal></expr>]</index></name> <init pos:start="49:16" pos:end="49:34">= <expr pos:start="49:18" pos:end="49:34"><block pos:start="49:18" pos:end="49:34">{<expr pos:start="49:19" pos:end="49:19"><literal type="number" pos:start="49:19" pos:end="49:19">1</literal></expr>,<expr pos:start="49:21" pos:end="49:21"><literal type="number" pos:start="49:21" pos:end="49:21">2</literal></expr>,<expr pos:start="49:23" pos:end="49:23"><literal type="number" pos:start="49:23" pos:end="49:23">3</literal></expr>,<expr pos:start="49:25" pos:end="49:25"><literal type="number" pos:start="49:25" pos:end="49:25">4</literal></expr>,<expr pos:start="49:27" pos:end="49:27"><literal type="number" pos:start="49:27" pos:end="49:27">5</literal></expr>,<expr pos:start="49:29" pos:end="49:29"><literal type="number" pos:start="49:29" pos:end="49:29">6</literal></expr>,<expr pos:start="49:31" pos:end="49:31"><literal type="number" pos:start="49:31" pos:end="49:31">7</literal></expr>,<expr pos:start="49:33" pos:end="49:33"><literal type="number" pos:start="49:33" pos:end="49:33">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:57"><decl pos:start="51:5" pos:end="51:56"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:9">i</name> <init pos:start="51:11" pos:end="51:56">= <expr pos:start="51:13" pos:end="51:56"><call pos:start="51:13" pos:end="51:56"><name pos:start="51:13" pos:end="51:18">search</name><argument_list pos:start="51:19" pos:end="51:56">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">tab</name></expr></argument>, <argument pos:start="51:25" pos:end="51:50"><expr pos:start="51:25" pos:end="51:50"><sizeof pos:start="51:25" pos:end="51:35">sizeof<argument_list pos:start="51:31" pos:end="51:35">(<argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">tab</name></expr></argument>)</argument_list></sizeof><operator pos:start="51:36" pos:end="51:36">/</operator><sizeof pos:start="51:37" pos:end="51:50">sizeof<argument_list pos:start="51:43" pos:end="51:50">(<argument pos:start="51:44" pos:end="51:49"><expr pos:start="51:44" pos:end="51:49"><name pos:start="51:44" pos:end="51:49"><name pos:start="51:44" pos:end="51:46">tab</name><index pos:start="51:47" pos:end="51:49">[<expr pos:start="51:48" pos:end="51:48"><literal type="number" pos:start="51:48" pos:end="51:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="51:53" pos:end="51:55"><expr pos:start="51:53" pos:end="51:55"><literal type="number" pos:start="51:53" pos:end="51:55">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:20"><expr pos:start="52:5" pos:end="52:19"><call pos:start="52:5" pos:end="52:19"><name pos:start="52:5" pos:end="52:10">assert</name><argument_list pos:start="52:11" pos:end="52:19">(<argument pos:start="52:12" pos:end="52:18"><expr pos:start="52:12" pos:end="52:18"><name pos:start="52:12" pos:end="52:12">i</name> <operator pos:start="52:14" pos:end="52:15">==</operator> <operator pos:start="52:17" pos:end="52:17">-</operator><literal type="number" pos:start="52:18" pos:end="52:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="55:1" pos:end="62:3">/* "Faulty Unit test"
 * This test is provided to show the incorrectness of the algorithm.
 * In this program, we assume that two arrays follow each other in memory
 * (this depends on the compiler) such as tab[8] is tab2[0].
 * In that very specific case, if tab2[0] contains the value we are looking
 * for (11 in this example), the algorithm will return 8 instead of -1.
 * It is however very unlikely that a unit test covers such a specific case.
 */</comment>
<function pos:start="63:1" pos:end="78:1"><type pos:start="63:1" pos:end="63:4"><name pos:start="63:1" pos:end="63:4">void</name></type> <name pos:start="63:6" pos:end="63:16">faulty_test</name><parameter_list pos:start="63:17" pos:end="63:18">()</parameter_list> <block pos:start="63:20" pos:end="78:1">{<block_content pos:start="65:5" pos:end="77:20">
    <comment type="block" pos:start="64:5" pos:end="64:52">/* Two arrays, following each other in memory */</comment>
    <decl_stmt pos:start="65:5" pos:end="65:35"><decl pos:start="65:5" pos:end="65:34"><type pos:start="65:5" pos:end="65:7"><name pos:start="65:5" pos:end="65:7">int</name></type> <name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:11">tab</name><index pos:start="65:12" pos:end="65:14">[<expr pos:start="65:13" pos:end="65:13"><literal type="number" pos:start="65:13" pos:end="65:13">8</literal></expr>]</index></name> <init pos:start="65:16" pos:end="65:34">= <expr pos:start="65:18" pos:end="65:34"><block pos:start="65:18" pos:end="65:34">{<expr pos:start="65:19" pos:end="65:19"><literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr>,<expr pos:start="65:21" pos:end="65:21"><literal type="number" pos:start="65:21" pos:end="65:21">2</literal></expr>,<expr pos:start="65:23" pos:end="65:23"><literal type="number" pos:start="65:23" pos:end="65:23">3</literal></expr>,<expr pos:start="65:25" pos:end="65:25"><literal type="number" pos:start="65:25" pos:end="65:25">4</literal></expr>,<expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">5</literal></expr>,<expr pos:start="65:29" pos:end="65:29"><literal type="number" pos:start="65:29" pos:end="65:29">6</literal></expr>,<expr pos:start="65:31" pos:end="65:31"><literal type="number" pos:start="65:31" pos:end="65:31">7</literal></expr>,<expr pos:start="65:33" pos:end="65:33"><literal type="number" pos:start="65:33" pos:end="65:33">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>  
    <decl_stmt pos:start="66:5" pos:end="66:44"><decl pos:start="66:5" pos:end="66:43"><type pos:start="66:5" pos:end="66:7"><name pos:start="66:5" pos:end="66:7">int</name></type> <name pos:start="66:9" pos:end="66:15"><name pos:start="66:9" pos:end="66:12">tab2</name><index pos:start="66:13" pos:end="66:15">[<expr pos:start="66:14" pos:end="66:14"><literal type="number" pos:start="66:14" pos:end="66:14">8</literal></expr>]</index></name> <init pos:start="66:17" pos:end="66:43">= <expr pos:start="66:19" pos:end="66:43"><block pos:start="66:19" pos:end="66:43">{<expr pos:start="66:20" pos:end="66:21"><literal type="number" pos:start="66:20" pos:end="66:21">11</literal></expr>,<expr pos:start="66:23" pos:end="66:24"><literal type="number" pos:start="66:23" pos:end="66:24">12</literal></expr>,<expr pos:start="66:26" pos:end="66:27"><literal type="number" pos:start="66:26" pos:end="66:27">13</literal></expr>,<expr pos:start="66:29" pos:end="66:30"><literal type="number" pos:start="66:29" pos:end="66:30">14</literal></expr>,<expr pos:start="66:32" pos:end="66:33"><literal type="number" pos:start="66:32" pos:end="66:33">15</literal></expr>,<expr pos:start="66:35" pos:end="66:36"><literal type="number" pos:start="66:35" pos:end="66:36">16</literal></expr>,<expr pos:start="66:38" pos:end="66:39"><literal type="number" pos:start="66:38" pos:end="66:39">17</literal></expr>,<expr pos:start="66:41" pos:end="66:42"><literal type="number" pos:start="66:41" pos:end="66:42">18</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="67:5" pos:end="67:61">/* Printing the address of the beginning of each array */</comment>
    <expr_stmt pos:start="68:5" pos:end="68:28"><expr pos:start="68:5" pos:end="68:27"><call pos:start="68:5" pos:end="68:27"><name pos:start="68:5" pos:end="68:10">printf</name><argument_list pos:start="68:11" pos:end="68:27">(<argument pos:start="68:12" pos:end="68:17"><expr pos:start="68:12" pos:end="68:17"><literal type="string" pos:start="68:12" pos:end="68:17">"%p\n"</literal></expr></argument>, <argument pos:start="68:20" pos:end="68:26"><expr pos:start="68:20" pos:end="68:26"><operator pos:start="68:20" pos:end="68:20">&amp;</operator><name pos:start="68:21" pos:end="68:26"><name pos:start="68:21" pos:end="68:23">tab</name><index pos:start="68:24" pos:end="68:26">[<expr pos:start="68:25" pos:end="68:25"><literal type="number" pos:start="68:25" pos:end="68:25">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:29"><expr pos:start="69:5" pos:end="69:28"><call pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:10">printf</name><argument_list pos:start="69:11" pos:end="69:28">(<argument pos:start="69:12" pos:end="69:17"><expr pos:start="69:12" pos:end="69:17"><literal type="string" pos:start="69:12" pos:end="69:17">"%p\n"</literal></expr></argument>, <argument pos:start="69:20" pos:end="69:27"><expr pos:start="69:20" pos:end="69:27"><operator pos:start="69:20" pos:end="69:20">&amp;</operator><name pos:start="69:21" pos:end="69:27"><name pos:start="69:21" pos:end="69:24">tab2</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="71:5" pos:end="71:69">/* Search for 11 which is located in tab2[0] (and thus tab[8]) */</comment>
    <decl_stmt pos:start="72:5" pos:end="72:56"><decl pos:start="72:5" pos:end="72:55"><type pos:start="72:5" pos:end="72:7"><name pos:start="72:5" pos:end="72:7">int</name></type> <name pos:start="72:9" pos:end="72:9">i</name> <init pos:start="72:11" pos:end="72:55">= <expr pos:start="72:13" pos:end="72:55"><call pos:start="72:13" pos:end="72:55"><name pos:start="72:13" pos:end="72:18">search</name><argument_list pos:start="72:19" pos:end="72:55">(<argument pos:start="72:20" pos:end="72:22"><expr pos:start="72:20" pos:end="72:22"><name pos:start="72:20" pos:end="72:22">tab</name></expr></argument>, <argument pos:start="72:25" pos:end="72:50"><expr pos:start="72:25" pos:end="72:50"><sizeof pos:start="72:25" pos:end="72:35">sizeof<argument_list pos:start="72:31" pos:end="72:35">(<argument pos:start="72:32" pos:end="72:34"><expr pos:start="72:32" pos:end="72:34"><name pos:start="72:32" pos:end="72:34">tab</name></expr></argument>)</argument_list></sizeof><operator pos:start="72:36" pos:end="72:36">/</operator><sizeof pos:start="72:37" pos:end="72:50">sizeof<argument_list pos:start="72:43" pos:end="72:50">(<argument pos:start="72:44" pos:end="72:49"><expr pos:start="72:44" pos:end="72:49"><name pos:start="72:44" pos:end="72:49"><name pos:start="72:44" pos:end="72:46">tab</name><index pos:start="72:47" pos:end="72:49">[<expr pos:start="72:48" pos:end="72:48"><literal type="number" pos:start="72:48" pos:end="72:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="72:53" pos:end="72:54"><expr pos:start="72:53" pos:end="72:54"><literal type="number" pos:start="72:53" pos:end="72:54">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="72:58" pos:end="72:79">// i = 8 instead of -1</comment>
    <comment type="block" pos:start="73:5" pos:end="73:34">/* Here i = 8 instead of -1 */</comment>
    <expr_stmt pos:start="74:5" pos:end="74:22"><expr pos:start="74:5" pos:end="74:21"><call pos:start="74:5" pos:end="74:21"><name pos:start="74:5" pos:end="74:10">printf</name><argument_list pos:start="74:11" pos:end="74:21">(<argument pos:start="74:12" pos:end="74:17"><expr pos:start="74:12" pos:end="74:17"><literal type="string" pos:start="74:12" pos:end="74:17">"%d\n"</literal></expr></argument>, <argument pos:start="74:20" pos:end="74:20"><expr pos:start="74:20" pos:end="74:20"><name pos:start="74:20" pos:end="74:20">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><call pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:10">printf</name><argument_list pos:start="75:11" pos:end="75:26">(<argument pos:start="75:12" pos:end="75:17"><expr pos:start="75:12" pos:end="75:17"><literal type="string" pos:start="75:12" pos:end="75:17">"%d\n"</literal></expr></argument>, <argument pos:start="75:20" pos:end="75:25"><expr pos:start="75:20" pos:end="75:25"><name pos:start="75:20" pos:end="75:25"><name pos:start="75:20" pos:end="75:22">tab</name><index pos:start="75:23" pos:end="75:25">[<expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><call pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:10">assert</name><argument_list pos:start="77:11" pos:end="77:19">(<argument pos:start="77:12" pos:end="77:18"><expr pos:start="77:12" pos:end="77:18"><name pos:start="77:12" pos:end="77:12">i</name> <operator pos:start="77:14" pos:end="77:15">==</operator> <operator pos:start="77:17" pos:end="77:17">-</operator><literal type="number" pos:start="77:18" pos:end="77:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" pos:start="80:1" pos:end="86:3">/* "Random test"
 * This test is design to generate a mixed output.
 * In this test we will look for values between 1 and 10. Values 1-8 should
 * not result in the algorithm going out of bounds while values 9 and 10 should
 * push it to look in tab[8]. With this example ~80% of the traces should be
 * GOOD and ~20% of the traces should be BAD.
 */</comment> 
<function pos:start="87:1" pos:end="111:1"><type pos:start="87:1" pos:end="87:4"><name pos:start="87:1" pos:end="87:4">void</name></type> <name pos:start="87:6" pos:end="87:16">random_test</name><parameter_list pos:start="87:17" pos:end="87:18">()</parameter_list> <block pos:start="87:20" pos:end="111:1">{<block_content pos:start="88:5" pos:end="110:28">
    <decl_stmt pos:start="88:5" pos:end="88:37"><decl pos:start="88:5" pos:end="88:36"><type pos:start="88:5" pos:end="88:7"><name pos:start="88:5" pos:end="88:7">int</name></type> <name pos:start="88:9" pos:end="88:14"><name pos:start="88:9" pos:end="88:11">tab</name><index pos:start="88:12" pos:end="88:14">[<expr pos:start="88:13" pos:end="88:13"><literal type="number" pos:start="88:13" pos:end="88:13">9</literal></expr>]</index></name> <init pos:start="88:16" pos:end="88:36">= <expr pos:start="88:18" pos:end="88:36"><block pos:start="88:18" pos:end="88:36">{<expr pos:start="88:19" pos:end="88:19"><literal type="number" pos:start="88:19" pos:end="88:19">1</literal></expr>,<expr pos:start="88:21" pos:end="88:21"><literal type="number" pos:start="88:21" pos:end="88:21">2</literal></expr>,<expr pos:start="88:23" pos:end="88:23"><literal type="number" pos:start="88:23" pos:end="88:23">3</literal></expr>,<expr pos:start="88:25" pos:end="88:25"><literal type="number" pos:start="88:25" pos:end="88:25">4</literal></expr>,<expr pos:start="88:27" pos:end="88:27"><literal type="number" pos:start="88:27" pos:end="88:27">5</literal></expr>,<expr pos:start="88:29" pos:end="88:29"><literal type="number" pos:start="88:29" pos:end="88:29">6</literal></expr>,<expr pos:start="88:31" pos:end="88:31"><literal type="number" pos:start="88:31" pos:end="88:31">7</literal></expr>,<expr pos:start="88:33" pos:end="88:33"><literal type="number" pos:start="88:33" pos:end="88:33">8</literal></expr>,<expr pos:start="88:35" pos:end="88:35"><literal type="number" pos:start="88:35" pos:end="88:35">9</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:start="89:9" pos:end="89:50">//int* tab = (int*) alloca(8*sizeof(int));</comment>
	<comment type="line" pos:start="90:9" pos:end="90:36">//for(int i= 1; i &lt; 9; i++){</comment>
	<comment type="line" pos:start="91:9" pos:end="91:29">//	tab[i-1] = i;</comment>
	<comment type="line" pos:start="92:9" pos:end="92:11">//}</comment>

    <comment type="block" pos:start="94:5" pos:end="94:25">/* Initialize rand */</comment>
    <expr_stmt pos:start="95:5" pos:end="95:22"><expr pos:start="95:5" pos:end="95:21"><call pos:start="95:5" pos:end="95:21"><name pos:start="95:5" pos:end="95:9">srand</name><argument_list pos:start="95:10" pos:end="95:21">(<argument pos:start="95:11" pos:end="95:20"><expr pos:start="95:11" pos:end="95:20"><call pos:start="95:11" pos:end="95:20"><name pos:start="95:11" pos:end="95:14">time</name><argument_list pos:start="95:15" pos:end="95:20">(<argument pos:start="95:16" pos:end="95:19"><expr pos:start="95:16" pos:end="95:19"><name pos:start="95:16" pos:end="95:19">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   
    <comment type="block" pos:start="97:5" pos:end="97:52">/* We're looking for a value between 1 and 10 */</comment>
    <comment type="line" pos:start="98:5" pos:end="98:30">//int v = (rand() % 10)+1;</comment>
	<expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:10">gt</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <operator pos:start="99:14" pos:end="99:14">(</operator><call pos:start="99:15" pos:end="99:20"><name pos:start="99:15" pos:end="99:18">rand</name><argument_list pos:start="99:19" pos:end="99:20">()</argument_list></call> <operator pos:start="99:22" pos:end="99:22">%</operator> <literal type="number" pos:start="99:24" pos:end="99:25">18</literal><operator pos:start="99:26" pos:end="99:26">)</operator></expr>;</expr_stmt>
	<decl_stmt pos:start="100:9" pos:end="100:33"><decl pos:start="100:9" pos:end="100:32"><type pos:start="100:9" pos:end="100:11"><name pos:start="100:9" pos:end="100:11">int</name></type> <name pos:start="100:13" pos:end="100:13">v</name> <init pos:start="100:15" pos:end="100:32">= <expr pos:start="100:17" pos:end="100:32"><operator pos:start="100:17" pos:end="100:17">(</operator><call pos:start="100:18" pos:end="100:23"><name pos:start="100:18" pos:end="100:21">rand</name><argument_list pos:start="100:22" pos:end="100:23">()</argument_list></call> <operator pos:start="100:25" pos:end="100:25">%</operator> <literal type="number" pos:start="100:27" pos:end="100:28">10</literal><operator pos:start="100:29" pos:end="100:29">)</operator><operator pos:start="100:30" pos:end="100:30">+</operator><literal type="number" pos:start="100:31" pos:end="100:32">10</literal></expr></init></decl>;</decl_stmt>
	<if_stmt pos:start="101:9" pos:end="102:21"><if pos:start="101:9" pos:end="101:30">if <condition pos:start="101:12" pos:end="101:17">(<expr pos:start="101:13" pos:end="101:16"><name pos:start="101:13" pos:end="101:14">gt</name><operator pos:start="101:15" pos:end="101:15">&lt;</operator><literal type="number" pos:start="101:16" pos:end="101:16">9</literal></expr>)</condition><block type="pseudo" pos:start="101:19" pos:end="101:30"><block_content pos:start="101:19" pos:end="101:30"> <expr_stmt pos:start="101:19" pos:end="101:30"><expr pos:start="101:19" pos:end="101:29"><name pos:start="101:19" pos:end="101:19">v</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:29"><name pos:start="101:23" pos:end="101:25">tab</name><index pos:start="101:26" pos:end="101:29">[<expr pos:start="101:27" pos:end="101:28"><name pos:start="101:27" pos:end="101:28">gt</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
	<else pos:start="102:9" pos:end="102:21">else<block type="pseudo" pos:start="102:14" pos:end="102:21"><block_content pos:start="102:14" pos:end="102:21"> <expr_stmt pos:start="102:14" pos:end="102:21"><expr pos:start="102:14" pos:end="102:20"><name pos:start="102:14" pos:end="102:15">gt</name> <operator pos:start="102:17" pos:end="102:17">=</operator> <operator pos:start="102:19" pos:end="102:19">-</operator><literal type="number" pos:start="102:20" pos:end="102:20">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<comment type="line" pos:start="103:9" pos:end="103:17">//v = 11;</comment>

    <comment type="block" pos:start="105:5" pos:end="105:44">/* searching for the value in the tab */</comment>
    <decl_stmt pos:start="106:5" pos:end="106:55"><decl pos:start="106:5" pos:end="106:54"><type pos:start="106:5" pos:end="106:7"><name pos:start="106:5" pos:end="106:7">int</name></type> <name pos:start="106:9" pos:end="106:9">i</name> <init pos:start="106:11" pos:end="106:54">= <expr pos:start="106:13" pos:end="106:54"><call pos:start="106:13" pos:end="106:54"><name pos:start="106:13" pos:end="106:18">search</name><argument_list pos:start="106:19" pos:end="106:54">(<argument pos:start="106:20" pos:end="106:22"><expr pos:start="106:20" pos:end="106:22"><name pos:start="106:20" pos:end="106:22">tab</name></expr></argument>, <argument pos:start="106:25" pos:end="106:50"><expr pos:start="106:25" pos:end="106:50"><sizeof pos:start="106:25" pos:end="106:35">sizeof<argument_list pos:start="106:31" pos:end="106:35">(<argument pos:start="106:32" pos:end="106:34"><expr pos:start="106:32" pos:end="106:34"><name pos:start="106:32" pos:end="106:34">tab</name></expr></argument>)</argument_list></sizeof><operator pos:start="106:36" pos:end="106:36">/</operator><sizeof pos:start="106:37" pos:end="106:50">sizeof<argument_list pos:start="106:43" pos:end="106:50">(<argument pos:start="106:44" pos:end="106:49"><expr pos:start="106:44" pos:end="106:49"><name pos:start="106:44" pos:end="106:49"><name pos:start="106:44" pos:end="106:46">tab</name><index pos:start="106:47" pos:end="106:49">[<expr pos:start="106:48" pos:end="106:48"><literal type="number" pos:start="106:48" pos:end="106:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="106:53" pos:end="106:53"><expr pos:start="106:53" pos:end="106:53"><name pos:start="106:53" pos:end="106:53">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:start="107:9" pos:end="107:36">//int i = search(tab, 8, v);</comment>

    <comment type="block" pos:start="109:5" pos:end="109:51">/* printing the value found by the algorithm */</comment>
    <expr_stmt pos:start="110:5" pos:end="110:28"><expr pos:start="110:5" pos:end="110:27"><call pos:start="110:5" pos:end="110:27"><name pos:start="110:5" pos:end="110:10">printf</name><argument_list pos:start="110:11" pos:end="110:27">(<argument pos:start="110:12" pos:end="110:21"><expr pos:start="110:12" pos:end="110:21"><literal type="string" pos:start="110:12" pos:end="110:21">"%d\t%d\n"</literal></expr></argument>, <argument pos:start="110:24" pos:end="110:24"><expr pos:start="110:24" pos:end="110:24"><name pos:start="110:24" pos:end="110:24">i</name></expr></argument>,<argument pos:start="110:26" pos:end="110:26"><expr pos:start="110:26" pos:end="110:26"><name pos:start="110:26" pos:end="110:26">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen" pos:start="113:1" pos:end="114:3">/**
**/</comment>
<function pos:start="115:1" pos:end="170:1"><type pos:start="115:1" pos:end="115:4"><name pos:start="115:1" pos:end="115:4">void</name></type> <name pos:start="115:6" pos:end="115:10">test_</name><parameter_list pos:start="115:11" pos:end="115:12">()</parameter_list><block pos:start="115:13" pos:end="170:1">{<block_content pos:start="116:9" pos:end="169:38">
	<decl_stmt pos:start="116:9" pos:end="116:98"><decl pos:start="116:9" pos:end="116:97"><type pos:start="116:9" pos:end="116:13"><name pos:start="116:9" pos:end="116:12">char</name><modifier pos:start="116:13" pos:end="116:13">*</modifier></type> <name pos:start="116:15" pos:end="116:19">FNAME</name> <init pos:start="116:21" pos:end="116:97">= <expr pos:start="116:23" pos:end="116:97"><literal type="string" pos:start="116:23" pos:end="116:97">"/media/kdam/Data/UCL/code/Project2/Project2/samples/search/search_test.in"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="117:9" pos:end="117:14"><decl pos:start="117:9" pos:end="117:13"><type pos:start="117:9" pos:end="117:11"><name pos:start="117:9" pos:end="117:11">int</name></type> <name pos:start="117:13" pos:end="117:13">n</name></decl>;</decl_stmt>
	<decl_stmt pos:start="118:9" pos:end="118:14"><decl pos:start="118:9" pos:end="118:13"><type pos:start="118:9" pos:end="118:11"><name pos:start="118:9" pos:end="118:11">int</name></type> <name pos:start="118:13" pos:end="118:13">v</name></decl>;</decl_stmt>
	<decl_stmt pos:start="119:9" pos:end="119:19"><decl pos:start="119:9" pos:end="119:18"><type pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">int</name></type> <name pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:15">arr</name><index pos:start="119:16" pos:end="119:18">[<expr pos:start="119:17" pos:end="119:17"><literal type="number" pos:start="119:17" pos:end="119:17">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="line" pos:start="120:9" pos:end="120:20">//int * arr;</comment>
	<decl_stmt pos:start="121:9" pos:end="121:19"><decl pos:start="121:9" pos:end="121:18"><type pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:12">FILE</name> <modifier pos:start="121:14" pos:end="121:14">*</modifier></type><name pos:start="121:15" pos:end="121:18">fptr</name></decl>;</decl_stmt>
	<expr_stmt pos:start="122:9" pos:end="122:32"><expr pos:start="122:9" pos:end="122:31"><name pos:start="122:9" pos:end="122:12">fptr</name> <operator pos:start="122:14" pos:end="122:14">=</operator> <call pos:start="122:16" pos:end="122:31"><name pos:start="122:16" pos:end="122:20">fopen</name><argument_list pos:start="122:21" pos:end="122:31">(<argument pos:start="122:22" pos:end="122:26"><expr pos:start="122:22" pos:end="122:26"><name pos:start="122:22" pos:end="122:26">FNAME</name></expr></argument>,<argument pos:start="122:28" pos:end="122:30"><expr pos:start="122:28" pos:end="122:30"><literal type="string" pos:start="122:28" pos:end="122:30">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="123:9" pos:end="123:31"><expr pos:start="123:9" pos:end="123:30"><call pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:14">fscanf</name><argument_list pos:start="123:15" pos:end="123:30">(<argument pos:start="123:16" pos:end="123:19"><expr pos:start="123:16" pos:end="123:19"><name pos:start="123:16" pos:end="123:19">fptr</name></expr></argument>,<argument pos:start="123:21" pos:end="123:24"><expr pos:start="123:21" pos:end="123:24"><literal type="string" pos:start="123:21" pos:end="123:24">"%d"</literal></expr></argument>, <argument pos:start="123:27" pos:end="123:28"><expr pos:start="123:27" pos:end="123:28"><operator pos:start="123:27" pos:end="123:27">&amp;</operator><name pos:start="123:28" pos:end="123:28">n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="124:9" pos:end="124:28"><expr pos:start="124:9" pos:end="124:27"><call pos:start="124:9" pos:end="124:27"><name pos:start="124:9" pos:end="124:14">printf</name><argument_list pos:start="124:15" pos:end="124:27">(<argument pos:start="124:16" pos:end="124:23"><expr pos:start="124:16" pos:end="124:23"><literal type="string" pos:start="124:16" pos:end="124:23">"n=%d\n"</literal></expr></argument>, <argument pos:start="124:26" pos:end="124:26"><expr pos:start="124:26" pos:end="124:26"><name pos:start="124:26" pos:end="124:26">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:start="125:9" pos:end="125:44">//arr = (int*)malloc(sizeof(int)*n);</comment>
	<for pos:start="126:9" pos:end="129:9">for<control pos:start="126:12" pos:end="126:34">(<init pos:start="126:13" pos:end="126:22"><decl pos:start="126:13" pos:end="126:21"><type pos:start="126:13" pos:end="126:15"><name pos:start="126:13" pos:end="126:15">int</name></type> <name pos:start="126:17" pos:end="126:17">i</name> <init pos:start="126:19" pos:end="126:21">= <expr pos:start="126:21" pos:end="126:21"><literal type="number" pos:start="126:21" pos:end="126:21">0</literal></expr></init></decl>;</init> <condition pos:start="126:24" pos:end="126:29"><expr pos:start="126:24" pos:end="126:28"><name pos:start="126:24" pos:end="126:24">i</name> <operator pos:start="126:26" pos:end="126:26">&lt;</operator> <name pos:start="126:28" pos:end="126:28">n</name></expr>;</condition> <incr pos:start="126:31" pos:end="126:33"><expr pos:start="126:31" pos:end="126:33"><name pos:start="126:31" pos:end="126:31">i</name><operator pos:start="126:32" pos:end="126:33">++</operator></expr></incr>)</control><block pos:start="126:35" pos:end="129:9">{<block_content pos:start="127:17" pos:end="128:38">
		<expr_stmt pos:start="127:17" pos:end="127:44"><expr pos:start="127:17" pos:end="127:43"><call pos:start="127:17" pos:end="127:43"><name pos:start="127:17" pos:end="127:22">fscanf</name><argument_list pos:start="127:23" pos:end="127:43">(<argument pos:start="127:24" pos:end="127:27"><expr pos:start="127:24" pos:end="127:27"><name pos:start="127:24" pos:end="127:27">fptr</name></expr></argument>,<argument pos:start="127:29" pos:end="127:32"><expr pos:start="127:29" pos:end="127:32"><literal type="string" pos:start="127:29" pos:end="127:32">"%d"</literal></expr></argument>, <argument pos:start="127:35" pos:end="127:41"><expr pos:start="127:35" pos:end="127:41"><operator pos:start="127:35" pos:end="127:35">&amp;</operator><name pos:start="127:36" pos:end="127:41"><name pos:start="127:36" pos:end="127:38">arr</name><index pos:start="127:39" pos:end="127:41">[<expr pos:start="127:40" pos:end="127:40"><name pos:start="127:40" pos:end="127:40">i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="128:17" pos:end="128:38"><expr pos:start="128:17" pos:end="128:37"><call pos:start="128:17" pos:end="128:37"><name pos:start="128:17" pos:end="128:22">printf</name><argument_list pos:start="128:23" pos:end="128:37">(<argument pos:start="128:24" pos:end="128:28"><expr pos:start="128:24" pos:end="128:28"><literal type="string" pos:start="128:24" pos:end="128:28">"%d "</literal></expr></argument>, <argument pos:start="128:31" pos:end="128:36"><expr pos:start="128:31" pos:end="128:36"><name pos:start="128:31" pos:end="128:36"><name pos:start="128:31" pos:end="128:33">arr</name><index pos:start="128:34" pos:end="128:36">[<expr pos:start="128:35" pos:end="128:35"><name pos:start="128:35" pos:end="128:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt pos:start="130:9" pos:end="130:31"><expr pos:start="130:9" pos:end="130:30"><call pos:start="130:9" pos:end="130:30"><name pos:start="130:9" pos:end="130:14">fscanf</name><argument_list pos:start="130:15" pos:end="130:30">(<argument pos:start="130:16" pos:end="130:19"><expr pos:start="130:16" pos:end="130:19"><name pos:start="130:16" pos:end="130:19">fptr</name></expr></argument>,<argument pos:start="130:21" pos:end="130:24"><expr pos:start="130:21" pos:end="130:24"><literal type="string" pos:start="130:21" pos:end="130:24">"%d"</literal></expr></argument>, <argument pos:start="130:27" pos:end="130:28"><expr pos:start="130:27" pos:end="130:28"><operator pos:start="130:27" pos:end="130:27">&amp;</operator><name pos:start="130:28" pos:end="130:28">v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<decl_stmt pos:start="131:9" pos:end="131:16"><decl pos:start="131:9" pos:end="131:13"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:13">j</name></decl>,<decl pos:start="131:15" pos:end="131:15"><type ref="prev" pos:start="131:9" pos:end="131:11"/><name pos:start="131:15" pos:end="131:15">e</name></decl>;</decl_stmt>
	<if_stmt pos:start="132:9" pos:end="145:9"><if pos:start="132:9" pos:end="135:9">if <condition pos:start="132:12" pos:end="132:19">(<expr pos:start="132:13" pos:end="132:18"><name pos:start="132:13" pos:end="132:13">v</name> <operator pos:start="132:15" pos:end="132:16">&gt;=</operator> <literal type="number" pos:start="132:18" pos:end="132:18">0</literal></expr>)</condition><block pos:start="132:20" pos:end="135:9">{<block_content pos:start="133:17" pos:end="134:23">
		<expr_stmt pos:start="133:17" pos:end="133:27"><expr pos:start="133:17" pos:end="133:26"><name pos:start="133:17" pos:end="133:17">e</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:26"><name pos:start="133:21" pos:end="133:23">arr</name><index pos:start="133:24" pos:end="133:26">[<expr pos:start="133:25" pos:end="133:25"><name pos:start="133:25" pos:end="133:25">v</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt pos:start="134:17" pos:end="134:23"><expr pos:start="134:17" pos:end="134:22"><name pos:start="134:17" pos:end="134:18">gt</name> <operator pos:start="134:20" pos:end="134:20">=</operator> <name pos:start="134:22" pos:end="134:22">v</name></expr>;</expr_stmt>
	</block_content>}</block></if><else pos:start="135:10" pos:end="145:9">else<block pos:start="135:14" pos:end="145:9">{<block_content pos:start="136:17" pos:end="144:17">
		<if_stmt pos:start="136:17" pos:end="144:17"><if pos:start="136:17" pos:end="140:17">if<condition pos:start="136:19" pos:end="136:25">(<expr pos:start="136:20" pos:end="136:24"><name pos:start="136:20" pos:end="136:20">v</name><operator pos:start="136:21" pos:end="136:22">==</operator><operator pos:start="136:23" pos:end="136:23">-</operator><literal type="number" pos:start="136:24" pos:end="136:24">1</literal></expr>)</condition><block pos:start="136:26" pos:end="140:17">{<block_content pos:start="137:17" pos:end="139:24">
		<expr_stmt pos:start="137:17" pos:end="137:34"><expr pos:start="137:17" pos:end="137:33"><call pos:start="137:17" pos:end="137:33"><name pos:start="137:17" pos:end="137:21">srand</name><argument_list pos:start="137:22" pos:end="137:33">(<argument pos:start="137:23" pos:end="137:32"><expr pos:start="137:23" pos:end="137:32"><call pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:26">time</name><argument_list pos:start="137:27" pos:end="137:32">(<argument pos:start="137:28" pos:end="137:31"><expr pos:start="137:28" pos:end="137:31"><name pos:start="137:28" pos:end="137:31">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="138:17" pos:end="138:37"><expr pos:start="138:17" pos:end="138:36"><name pos:start="138:17" pos:end="138:17">e</name> <operator pos:start="138:19" pos:end="138:19">=</operator><operator pos:start="138:20" pos:end="138:20">(</operator><call pos:start="138:21" pos:end="138:26"><name pos:start="138:21" pos:end="138:24">rand</name><argument_list pos:start="138:25" pos:end="138:26">()</argument_list></call> <operator pos:start="138:28" pos:end="138:28">%</operator> <literal type="number" pos:start="138:30" pos:end="138:31">10</literal><operator pos:start="138:32" pos:end="138:32">)</operator><operator pos:start="138:33" pos:end="138:33">+</operator><literal type="number" pos:start="138:34" pos:end="138:36">100</literal></expr>;</expr_stmt>
		<expr_stmt pos:start="139:17" pos:end="139:24"><expr pos:start="139:17" pos:end="139:23"><name pos:start="139:17" pos:end="139:18">gt</name> <operator pos:start="139:20" pos:end="139:20">=</operator> <operator pos:start="139:22" pos:end="139:22">-</operator><literal type="number" pos:start="139:23" pos:end="139:23">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if><else pos:start="140:18" pos:end="144:17">else<block pos:start="140:22" pos:end="144:17">{<block_content pos:start="141:17" pos:end="143:24">
		<expr_stmt pos:start="141:17" pos:end="141:34"><expr pos:start="141:17" pos:end="141:33"><call pos:start="141:17" pos:end="141:33"><name pos:start="141:17" pos:end="141:21">srand</name><argument_list pos:start="141:22" pos:end="141:33">(<argument pos:start="141:23" pos:end="141:32"><expr pos:start="141:23" pos:end="141:32"><call pos:start="141:23" pos:end="141:32"><name pos:start="141:23" pos:end="141:26">time</name><argument_list pos:start="141:27" pos:end="141:32">(<argument pos:start="141:28" pos:end="141:31"><expr pos:start="141:28" pos:end="141:31"><name pos:start="141:28" pos:end="141:31">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="142:17" pos:end="142:38"><expr pos:start="142:17" pos:end="142:37"><name pos:start="142:17" pos:end="142:17">e</name> <operator pos:start="142:19" pos:end="142:19">=</operator><operator pos:start="142:20" pos:end="142:20">-</operator><operator pos:start="142:21" pos:end="142:21">(</operator><call pos:start="142:22" pos:end="142:27"><name pos:start="142:22" pos:end="142:25">rand</name><argument_list pos:start="142:26" pos:end="142:27">()</argument_list></call> <operator pos:start="142:29" pos:end="142:29">%</operator> <literal type="number" pos:start="142:31" pos:end="142:33">10</literal><operator pos:start="142:33" pos:end="142:33">+</operator><literal type="number" pos:start="142:34" pos:end="142:36">100</literal><operator pos:start="142:37" pos:end="142:37">)</operator></expr>;</expr_stmt>
		<expr_stmt pos:start="143:17" pos:end="143:24"><expr pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:18">gt</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <operator pos:start="143:22" pos:end="143:22">-</operator><literal type="number" pos:start="143:23" pos:end="143:23">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt pos:start="146:9" pos:end="146:33"><expr pos:start="146:9" pos:end="146:32"><call pos:start="146:9" pos:end="146:32"><name pos:start="146:9" pos:end="146:14">printf</name><argument_list pos:start="146:15" pos:end="146:32">(<argument pos:start="146:16" pos:end="146:27"><expr pos:start="146:16" pos:end="146:27"><literal type="string" pos:start="146:16" pos:end="146:27">"\n%d\t%d\n"</literal></expr></argument>,<argument pos:start="146:29" pos:end="146:29"><expr pos:start="146:29" pos:end="146:29"><name pos:start="146:29" pos:end="146:29">v</name></expr></argument>,<argument pos:start="146:31" pos:end="146:31"><expr pos:start="146:31" pos:end="146:31"><name pos:start="146:31" pos:end="146:31">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt pos:start="148:9" pos:end="148:21"><expr pos:start="148:9" pos:end="148:20"><call pos:start="148:9" pos:end="148:20"><name pos:start="148:9" pos:end="148:14">fclose</name><argument_list pos:start="148:15" pos:end="148:20">(<argument pos:start="148:16" pos:end="148:19"><expr pos:start="148:16" pos:end="148:19"><name pos:start="148:16" pos:end="148:19">fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="150:9" pos:end="150:32"><expr pos:start="150:9" pos:end="150:31"><name pos:start="150:9" pos:end="150:12">fptr</name> <operator pos:start="150:14" pos:end="150:14">=</operator> <call pos:start="150:16" pos:end="150:31"><name pos:start="150:16" pos:end="150:20">fopen</name><argument_list pos:start="150:21" pos:end="150:31">(<argument pos:start="150:22" pos:end="150:26"><expr pos:start="150:22" pos:end="150:26"><name pos:start="150:22" pos:end="150:26">FNAME</name></expr></argument>,<argument pos:start="150:28" pos:end="150:30"><expr pos:start="150:28" pos:end="150:30"><literal type="string" pos:start="150:28" pos:end="150:30">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="151:9" pos:end="151:33"><expr pos:start="151:9" pos:end="151:32"><call pos:start="151:9" pos:end="151:32"><name pos:start="151:9" pos:end="151:15">fprintf</name><argument_list pos:start="151:16" pos:end="151:32">(<argument pos:start="151:17" pos:end="151:20"><expr pos:start="151:17" pos:end="151:20"><name pos:start="151:17" pos:end="151:20">fptr</name></expr></argument>,<argument pos:start="151:22" pos:end="151:27"><expr pos:start="151:22" pos:end="151:27"><literal type="string" pos:start="151:22" pos:end="151:27">"%d\n"</literal></expr></argument>, <argument pos:start="151:30" pos:end="151:30"><expr pos:start="151:30" pos:end="151:30"><name pos:start="151:30" pos:end="151:30">n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<for pos:start="152:9" pos:end="154:9">for<control pos:start="152:12" pos:end="152:34">(<init pos:start="152:13" pos:end="152:22"><decl pos:start="152:13" pos:end="152:21"><type pos:start="152:13" pos:end="152:15"><name pos:start="152:13" pos:end="152:15">int</name></type> <name pos:start="152:17" pos:end="152:17">i</name> <init pos:start="152:19" pos:end="152:21">= <expr pos:start="152:21" pos:end="152:21"><literal type="number" pos:start="152:21" pos:end="152:21">0</literal></expr></init></decl>;</init> <condition pos:start="152:24" pos:end="152:29"><expr pos:start="152:24" pos:end="152:28"><name pos:start="152:24" pos:end="152:24">i</name> <operator pos:start="152:26" pos:end="152:26">&lt;</operator> <name pos:start="152:28" pos:end="152:28">n</name></expr>;</condition> <incr pos:start="152:31" pos:end="152:33"><expr pos:start="152:31" pos:end="152:33"><name pos:start="152:31" pos:end="152:31">i</name><operator pos:start="152:32" pos:end="152:33">++</operator></expr></incr>)</control><block pos:start="152:35" pos:end="154:9">{<block_content pos:start="153:17" pos:end="153:44">
		<expr_stmt pos:start="153:17" pos:end="153:44"><expr pos:start="153:17" pos:end="153:43"><call pos:start="153:17" pos:end="153:43"><name pos:start="153:17" pos:end="153:23">fprintf</name><argument_list pos:start="153:24" pos:end="153:43">(<argument pos:start="153:25" pos:end="153:28"><expr pos:start="153:25" pos:end="153:28"><name pos:start="153:25" pos:end="153:28">fptr</name></expr></argument>,<argument pos:start="153:30" pos:end="153:34"><expr pos:start="153:30" pos:end="153:34"><literal type="string" pos:start="153:30" pos:end="153:34">"%d "</literal></expr></argument>, <argument pos:start="153:37" pos:end="153:42"><expr pos:start="153:37" pos:end="153:42"><name pos:start="153:37" pos:end="153:42"><name pos:start="153:37" pos:end="153:39">arr</name><index pos:start="153:40" pos:end="153:42">[<expr pos:start="153:41" pos:end="153:41"><name pos:start="153:41" pos:end="153:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="157:9">if <condition pos:start="155:12" pos:end="155:29">(<expr pos:start="155:13" pos:end="155:28"><name pos:start="155:13" pos:end="155:13">v</name> <operator pos:start="155:15" pos:end="155:15">&lt;</operator> <name pos:start="155:17" pos:end="155:17">n</name><operator pos:start="155:18" pos:end="155:18">-</operator><literal type="number" pos:start="155:19" pos:end="155:19">1</literal> <operator pos:start="155:21" pos:end="155:22">&amp;&amp;</operator> <name pos:start="155:24" pos:end="155:24">v</name> <operator pos:start="155:26" pos:end="155:27">&gt;=</operator><literal type="number" pos:start="155:28" pos:end="155:28">0</literal></expr>)</condition><block pos:start="155:30" pos:end="157:9">{<block_content pos:start="156:17" pos:end="156:21">
		<expr_stmt pos:start="156:17" pos:end="156:21"><expr pos:start="156:17" pos:end="156:20"><name pos:start="156:17" pos:end="156:17">v</name><operator pos:start="156:18" pos:end="156:19">+=</operator><literal type="number" pos:start="156:20" pos:end="156:20">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if><else pos:start="157:10" pos:end="161:9">else<block pos:start="157:14" pos:end="161:9">{<block_content pos:start="158:17" pos:end="160:42">
		<if_stmt pos:start="158:17" pos:end="160:42"><if pos:start="158:17" pos:end="158:37">if <condition pos:start="158:20" pos:end="158:27">(<expr pos:start="158:21" pos:end="158:26"><name pos:start="158:21" pos:end="158:21">v</name><operator pos:start="158:22" pos:end="158:23">&gt;=</operator><name pos:start="158:24" pos:end="158:24">n</name><operator pos:start="158:25" pos:end="158:25">-</operator><literal type="number" pos:start="158:26" pos:end="158:26">1</literal></expr>)</condition><block type="pseudo" pos:start="158:33" pos:end="158:37"><block_content pos:start="158:33" pos:end="158:37">	<expr_stmt pos:start="158:33" pos:end="158:37"><expr pos:start="158:33" pos:end="158:36"><name pos:start="158:33" pos:end="158:33">v</name><operator pos:start="158:34" pos:end="158:34">=</operator><operator pos:start="158:35" pos:end="158:35">-</operator><literal type="number" pos:start="158:36" pos:end="158:36">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif" pos:start="159:17" pos:end="159:40">else if <condition pos:start="159:25" pos:end="159:33">(<expr pos:start="159:26" pos:end="159:32"><name pos:start="159:26" pos:end="159:26">v</name> <operator pos:start="159:28" pos:end="159:29">==</operator> <operator pos:start="159:31" pos:end="159:31">-</operator><literal type="number" pos:start="159:32" pos:end="159:32">1</literal></expr>)</condition><block type="pseudo" pos:start="159:35" pos:end="159:40"><block_content pos:start="159:35" pos:end="159:40"> <expr_stmt pos:start="159:35" pos:end="159:40"><expr pos:start="159:35" pos:end="159:39"><name pos:start="159:35" pos:end="159:35">v</name><operator pos:start="159:36" pos:end="159:37">+=</operator><operator pos:start="159:38" pos:end="159:38">-</operator><literal type="number" pos:start="159:39" pos:end="159:39">1</literal></expr>;</expr_stmt></block_content></block></if>
				<else pos:start="160:33" pos:end="160:42">else<block type="pseudo" pos:start="160:38" pos:end="160:42"><block_content pos:start="160:38" pos:end="160:42"> <expr_stmt pos:start="160:38" pos:end="160:42"><expr pos:start="160:38" pos:end="160:41"><name pos:start="160:38" pos:end="160:38">v</name><operator pos:start="160:39" pos:end="160:39">=</operator> <literal type="number" pos:start="160:41" pos:end="160:41">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt pos:start="162:9" pos:end="162:27"><expr pos:start="162:9" pos:end="162:26"><call pos:start="162:9" pos:end="162:26"><name pos:start="162:9" pos:end="162:14">printf</name><argument_list pos:start="162:15" pos:end="162:26">(<argument pos:start="162:16" pos:end="162:23"><expr pos:start="162:16" pos:end="162:23"><literal type="string" pos:start="162:16" pos:end="162:23">"v=%d\n"</literal></expr></argument>,<argument pos:start="162:25" pos:end="162:25"><expr pos:start="162:25" pos:end="162:25"><name pos:start="162:25" pos:end="162:25">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="163:9" pos:end="163:31"><expr pos:start="163:9" pos:end="163:30"><call pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:15">fprintf</name><argument_list pos:start="163:16" pos:end="163:30">(<argument pos:start="163:17" pos:end="163:20"><expr pos:start="163:17" pos:end="163:20"><name pos:start="163:17" pos:end="163:20">fptr</name></expr></argument>,<argument pos:start="163:22" pos:end="163:27"><expr pos:start="163:22" pos:end="163:27"><literal type="string" pos:start="163:22" pos:end="163:27">"\n%d"</literal></expr></argument>,<argument pos:start="163:29" pos:end="163:29"><expr pos:start="163:29" pos:end="163:29"><name pos:start="163:29" pos:end="163:29">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="164:9" pos:end="164:21"><expr pos:start="164:9" pos:end="164:20"><call pos:start="164:9" pos:end="164:20"><name pos:start="164:9" pos:end="164:14">fclose</name><argument_list pos:start="164:15" pos:end="164:20">(<argument pos:start="164:16" pos:end="164:19"><expr pos:start="164:16" pos:end="164:19"><name pos:start="164:16" pos:end="164:19">fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="165:9" pos:end="165:59"><expr pos:start="165:9" pos:end="165:58"><call pos:start="165:9" pos:end="165:58"><name pos:start="165:9" pos:end="165:14">printf</name><argument_list pos:start="165:15" pos:end="165:58">(<argument pos:start="165:16" pos:end="165:29"><expr pos:start="165:16" pos:end="165:29"><literal type="string" pos:start="165:16" pos:end="165:29">"\nsize %ld\n"</literal></expr></argument>, <argument pos:start="165:32" pos:end="165:57"><expr pos:start="165:32" pos:end="165:57"><sizeof pos:start="165:32" pos:end="165:42">sizeof<argument_list pos:start="165:38" pos:end="165:42">(<argument pos:start="165:39" pos:end="165:41"><expr pos:start="165:39" pos:end="165:41"><name pos:start="165:39" pos:end="165:41">arr</name></expr></argument>)</argument_list></sizeof><operator pos:start="165:43" pos:end="165:43">/</operator><sizeof pos:start="165:44" pos:end="165:57">sizeof<argument_list pos:start="165:50" pos:end="165:57">(<argument pos:start="165:51" pos:end="165:56"><expr pos:start="165:51" pos:end="165:56"><name pos:start="165:51" pos:end="165:56"><name pos:start="165:51" pos:end="165:53">arr</name><index pos:start="165:54" pos:end="165:56">[<expr pos:start="165:55" pos:end="165:55"><literal type="number" pos:start="165:55" pos:end="165:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:start="166:9" pos:end="166:17">//e = 10;</comment>
	<comment type="line" pos:start="167:9" pos:end="167:14">//n=8;</comment>
	<expr_stmt pos:start="168:9" pos:end="168:30"><expr pos:start="168:9" pos:end="168:29"><name pos:start="168:9" pos:end="168:9">j</name> <operator pos:start="168:11" pos:end="168:11">=</operator> <call pos:start="168:13" pos:end="168:29"><name pos:start="168:13" pos:end="168:18">search</name><argument_list pos:start="168:19" pos:end="168:29">(<argument pos:start="168:20" pos:end="168:22"><expr pos:start="168:20" pos:end="168:22"><name pos:start="168:20" pos:end="168:22">arr</name></expr></argument>, <argument pos:start="168:25" pos:end="168:25"><expr pos:start="168:25" pos:end="168:25"><name pos:start="168:25" pos:end="168:25">n</name></expr></argument>, <argument pos:start="168:28" pos:end="168:28"><expr pos:start="168:28" pos:end="168:28"><name pos:start="168:28" pos:end="168:28">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="169:9" pos:end="169:38"><expr pos:start="169:9" pos:end="169:37"><call pos:start="169:9" pos:end="169:37"><name pos:start="169:9" pos:end="169:14">printf</name><argument_list pos:start="169:15" pos:end="169:37">(<argument pos:start="169:16" pos:end="169:32"><expr pos:start="169:16" pos:end="169:32"><literal type="string" pos:start="169:16" pos:end="169:32">"e=%d\tid=%d\n\n"</literal></expr></argument>,<argument pos:start="169:34" pos:end="169:34"><expr pos:start="169:34" pos:end="169:34"><name pos:start="169:34" pos:end="169:34">e</name></expr></argument>,<argument pos:start="169:36" pos:end="169:36"><expr pos:start="169:36" pos:end="169:36"><name pos:start="169:36" pos:end="169:36">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="172:1" pos:end="179:1"><type pos:start="172:1" pos:end="172:4"><name pos:start="172:1" pos:end="172:4">void</name></type> <name pos:start="172:6" pos:end="172:16">report_fail</name><parameter_list pos:start="172:17" pos:end="172:29">(<parameter pos:start="172:18" pos:end="172:22"><decl pos:start="172:18" pos:end="172:22"><type pos:start="172:18" pos:end="172:22"><name pos:start="172:18" pos:end="172:20">int</name></type> <name pos:start="172:22" pos:end="172:22">v</name></decl></parameter>,<parameter pos:start="172:24" pos:end="172:28"><decl pos:start="172:24" pos:end="172:28"><type pos:start="172:24" pos:end="172:28"><name pos:start="172:24" pos:end="172:26">int</name></type> <name pos:start="172:28" pos:end="172:28">o</name></decl></parameter>)</parameter_list><block pos:start="172:30" pos:end="179:1">{<block_content pos:start="173:9" pos:end="178:21">
	<expr_stmt pos:start="173:9" pos:end="173:33"><expr pos:start="173:9" pos:end="173:32"><call pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:14">printf</name><argument_list pos:start="173:15" pos:end="173:32">(<argument pos:start="173:16" pos:end="173:29"><expr pos:start="173:16" pos:end="173:29"><literal type="string" pos:start="173:16" pos:end="173:29">"Failed at %d"</literal></expr></argument>,<argument pos:start="173:31" pos:end="173:31"><expr pos:start="173:31" pos:end="173:31"><name pos:start="173:31" pos:end="173:31">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt pos:start="174:9" pos:end="174:99"><decl pos:start="174:9" pos:end="174:98"><type pos:start="174:9" pos:end="174:13"><name pos:start="174:9" pos:end="174:12">char</name><modifier pos:start="174:13" pos:end="174:13">*</modifier></type> <name pos:start="174:15" pos:end="174:19">FNAME</name> <init pos:start="174:21" pos:end="174:98">= <expr pos:start="174:23" pos:end="174:98"><literal type="string" pos:start="174:23" pos:end="174:98">"/media/kdam/Data/UCL/code/Project2/Project2/samples/search/search_test.out"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="175:9" pos:end="175:19"><decl pos:start="175:9" pos:end="175:18"><type pos:start="175:9" pos:end="175:14"><name pos:start="175:9" pos:end="175:12">FILE</name> <modifier pos:start="175:14" pos:end="175:14">*</modifier></type><name pos:start="175:15" pos:end="175:18">fptr</name></decl>;</decl_stmt>
	<expr_stmt pos:start="176:9" pos:end="176:32"><expr pos:start="176:9" pos:end="176:31"><name pos:start="176:9" pos:end="176:12">fptr</name> <operator pos:start="176:14" pos:end="176:14">=</operator> <call pos:start="176:16" pos:end="176:31"><name pos:start="176:16" pos:end="176:20">fopen</name><argument_list pos:start="176:21" pos:end="176:31">(<argument pos:start="176:22" pos:end="176:26"><expr pos:start="176:22" pos:end="176:26"><name pos:start="176:22" pos:end="176:26">FNAME</name></expr></argument>,<argument pos:start="176:28" pos:end="176:30"><expr pos:start="176:28" pos:end="176:30"><literal type="string" pos:start="176:28" pos:end="176:30">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="177:9" pos:end="177:37"><expr pos:start="177:9" pos:end="177:36"><call pos:start="177:9" pos:end="177:36"><name pos:start="177:9" pos:end="177:15">fprintf</name><argument_list pos:start="177:16" pos:end="177:36">(<argument pos:start="177:17" pos:end="177:20"><expr pos:start="177:17" pos:end="177:20"><name pos:start="177:17" pos:end="177:20">fptr</name></expr></argument>,<argument pos:start="177:22" pos:end="177:30"><expr pos:start="177:22" pos:end="177:30"><literal type="string" pos:start="177:22" pos:end="177:30">"%d %d\n"</literal></expr></argument>, <argument pos:start="177:33" pos:end="177:33"><expr pos:start="177:33" pos:end="177:33"><name pos:start="177:33" pos:end="177:33">v</name></expr></argument>,<argument pos:start="177:35" pos:end="177:35"><expr pos:start="177:35" pos:end="177:35"><name pos:start="177:35" pos:end="177:35">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="178:9" pos:end="178:21"><expr pos:start="178:9" pos:end="178:20"><call pos:start="178:9" pos:end="178:20"><name pos:start="178:9" pos:end="178:14">fclose</name><argument_list pos:start="178:15" pos:end="178:20">(<argument pos:start="178:16" pos:end="178:19"><expr pos:start="178:16" pos:end="178:19"><name pos:start="178:16" pos:end="178:19">fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="181:1" pos:end="187:1"><type pos:start="181:1" pos:end="181:4"><name pos:start="181:1" pos:end="181:4">void</name></type> <name pos:start="181:6" pos:end="181:16">report_pass</name><parameter_list pos:start="181:17" pos:end="181:29">(<parameter pos:start="181:18" pos:end="181:22"><decl pos:start="181:18" pos:end="181:22"><type pos:start="181:18" pos:end="181:22"><name pos:start="181:18" pos:end="181:20">int</name></type> <name pos:start="181:22" pos:end="181:22">v</name></decl></parameter>,<parameter pos:start="181:24" pos:end="181:28"><decl pos:start="181:24" pos:end="181:28"><type pos:start="181:24" pos:end="181:28"><name pos:start="181:24" pos:end="181:26">int</name></type> <name pos:start="181:28" pos:end="181:28">o</name></decl></parameter>)</parameter_list><block pos:start="181:30" pos:end="187:1">{<block_content pos:start="182:9" pos:end="186:21">
	<decl_stmt pos:start="182:9" pos:end="182:99"><decl pos:start="182:9" pos:end="182:98"><type pos:start="182:9" pos:end="182:13"><name pos:start="182:9" pos:end="182:12">char</name><modifier pos:start="182:13" pos:end="182:13">*</modifier></type> <name pos:start="182:15" pos:end="182:19">FNAME</name> <init pos:start="182:21" pos:end="182:98">= <expr pos:start="182:23" pos:end="182:98"><literal type="string" pos:start="182:23" pos:end="182:98">"/media/kdam/Data/UCL/code/Project2/Project2/samples/search/search_test.out"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="183:9" pos:end="183:19"><decl pos:start="183:9" pos:end="183:18"><type pos:start="183:9" pos:end="183:14"><name pos:start="183:9" pos:end="183:12">FILE</name> <modifier pos:start="183:14" pos:end="183:14">*</modifier></type><name pos:start="183:15" pos:end="183:18">fptr</name></decl>;</decl_stmt>
	<expr_stmt pos:start="184:9" pos:end="184:32"><expr pos:start="184:9" pos:end="184:31"><name pos:start="184:9" pos:end="184:12">fptr</name> <operator pos:start="184:14" pos:end="184:14">=</operator> <call pos:start="184:16" pos:end="184:31"><name pos:start="184:16" pos:end="184:20">fopen</name><argument_list pos:start="184:21" pos:end="184:31">(<argument pos:start="184:22" pos:end="184:26"><expr pos:start="184:22" pos:end="184:26"><name pos:start="184:22" pos:end="184:26">FNAME</name></expr></argument>,<argument pos:start="184:28" pos:end="184:30"><expr pos:start="184:28" pos:end="184:30"><literal type="string" pos:start="184:28" pos:end="184:30">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="185:9" pos:end="185:37"><expr pos:start="185:9" pos:end="185:36"><call pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:15">fprintf</name><argument_list pos:start="185:16" pos:end="185:36">(<argument pos:start="185:17" pos:end="185:20"><expr pos:start="185:17" pos:end="185:20"><name pos:start="185:17" pos:end="185:20">fptr</name></expr></argument>,<argument pos:start="185:22" pos:end="185:30"><expr pos:start="185:22" pos:end="185:30"><literal type="string" pos:start="185:22" pos:end="185:30">"%d %d\n"</literal></expr></argument>, <argument pos:start="185:33" pos:end="185:33"><expr pos:start="185:33" pos:end="185:33"><name pos:start="185:33" pos:end="185:33">v</name></expr></argument>,<argument pos:start="185:35" pos:end="185:35"><expr pos:start="185:35" pos:end="185:35"><name pos:start="185:35" pos:end="185:35">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="186:9" pos:end="186:21"><expr pos:start="186:9" pos:end="186:20"><call pos:start="186:9" pos:end="186:20"><name pos:start="186:9" pos:end="186:14">fclose</name><argument_list pos:start="186:15" pos:end="186:20">(<argument pos:start="186:16" pos:end="186:19"><expr pos:start="186:16" pos:end="186:19"><name pos:start="186:16" pos:end="186:19">fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function pos:start="189:1" pos:end="233:1"><type pos:start="189:1" pos:end="189:4"><name pos:start="189:1" pos:end="189:4">void</name></type> <name pos:start="189:6" pos:end="189:15">test_input</name><parameter_list pos:start="189:16" pos:end="189:17">()</parameter_list><block pos:start="189:18" pos:end="233:1">{<block_content pos:start="190:9" pos:end="231:5">
	<decl_stmt pos:start="190:9" pos:end="190:27"><decl pos:start="190:9" pos:end="190:26"><type pos:start="190:9" pos:end="190:11"><name pos:start="190:9" pos:end="190:11">int</name></type> <name pos:start="190:13" pos:end="190:18">MAXINT</name> <init pos:start="190:20" pos:end="190:26">= <expr pos:start="190:22" pos:end="190:26"><literal type="number" pos:start="190:22" pos:end="190:26">10000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="191:9" pos:end="191:99"><decl pos:start="191:9" pos:end="191:98"><type pos:start="191:9" pos:end="191:11"><name pos:start="191:9" pos:end="191:11">int</name></type> <name pos:start="191:13" pos:end="191:21"><name pos:start="191:13" pos:end="191:17">input</name><index pos:start="191:18" pos:end="191:21">[<expr pos:start="191:19" pos:end="191:20"><literal type="number" pos:start="191:19" pos:end="191:20">10</literal></expr>]</index></name> <init pos:start="191:23" pos:end="191:98">= <expr pos:start="191:25" pos:end="191:98"><block pos:start="191:25" pos:end="191:98">{<expr pos:start="191:26" pos:end="191:26"><literal type="number" pos:start="191:26" pos:end="191:26">1</literal></expr>,<expr pos:start="191:28" pos:end="191:28"><literal type="number" pos:start="191:28" pos:end="191:28">2</literal></expr>,<expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">3</literal></expr>,<expr pos:start="191:32" pos:end="191:32"><literal type="number" pos:start="191:32" pos:end="191:32">4</literal></expr>,<expr pos:start="191:34" pos:end="191:34"><literal type="number" pos:start="191:34" pos:end="191:34">5</literal></expr>,<expr pos:start="191:36" pos:end="191:36"><literal type="number" pos:start="191:36" pos:end="191:36">6</literal></expr>,<expr pos:start="191:38" pos:end="191:38"><literal type="number" pos:start="191:38" pos:end="191:38">7</literal></expr>,<expr pos:start="191:40" pos:end="191:40"><literal type="number" pos:start="191:40" pos:end="191:40">8</literal></expr>,<expr pos:start="191:42" pos:end="191:68"><operator pos:start="191:42" pos:end="191:42">(</operator><call pos:start="191:43" pos:end="191:48"><name pos:start="191:43" pos:end="191:46">rand</name><argument_list pos:start="191:47" pos:end="191:48">()</argument_list></call> <operator pos:start="191:50" pos:end="191:50">%</operator> <operator pos:start="191:52" pos:end="191:52">(</operator><name pos:start="191:53" pos:end="191:58">MAXINT</name> <operator pos:start="191:60" pos:end="191:60">-</operator> <literal type="number" pos:start="191:62" pos:end="191:62">8</literal><operator pos:start="191:63" pos:end="191:63">)</operator><operator pos:start="191:64" pos:end="191:64">)</operator> <operator pos:start="191:66" pos:end="191:66">+</operator> <literal type="number" pos:start="191:68" pos:end="191:68">9</literal></expr>,<expr pos:start="191:70" pos:end="191:97"><operator pos:start="191:70" pos:end="191:70">-</operator><operator pos:start="191:71" pos:end="191:71">(</operator><call pos:start="191:72" pos:end="191:77"><name pos:start="191:72" pos:end="191:75">rand</name><argument_list pos:start="191:76" pos:end="191:77">()</argument_list></call> <operator pos:start="191:79" pos:end="191:79">%</operator> <operator pos:start="191:81" pos:end="191:81">(</operator><name pos:start="191:82" pos:end="191:87">MAXINT</name> <operator pos:start="191:89" pos:end="191:89">-</operator> <literal type="number" pos:start="191:91" pos:end="191:91">3</literal><operator pos:start="191:92" pos:end="191:92">)</operator><operator pos:start="191:93" pos:end="191:93">)</operator> <operator pos:start="191:95" pos:end="191:95">-</operator> <literal type="number" pos:start="191:97" pos:end="191:97">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="192:9" pos:end="192:23"><decl pos:start="192:9" pos:end="192:22"><type pos:start="192:9" pos:end="192:11"><name pos:start="192:9" pos:end="192:11">int</name></type> <name pos:start="192:13" pos:end="192:18">n_test</name><init pos:start="192:19" pos:end="192:22">= <expr pos:start="192:21" pos:end="192:22"><literal type="number" pos:start="192:21" pos:end="192:22">10</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="194:9" pos:end="194:99"><decl pos:start="194:9" pos:end="194:98"><type pos:start="194:9" pos:end="194:13"><name pos:start="194:9" pos:end="194:12">char</name><modifier pos:start="194:13" pos:end="194:13">*</modifier></type> <name pos:start="194:15" pos:end="194:19">FNAME</name> <init pos:start="194:21" pos:end="194:98">= <expr pos:start="194:23" pos:end="194:98"><literal type="string" pos:start="194:23" pos:end="194:98">"/media/kdam/Data/UCL/code/Project2/Project2/samples/search/search_test.out"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="195:9" pos:end="195:19"><decl pos:start="195:9" pos:end="195:18"><type pos:start="195:9" pos:end="195:14"><name pos:start="195:9" pos:end="195:12">FILE</name> <modifier pos:start="195:14" pos:end="195:14">*</modifier></type><name pos:start="195:15" pos:end="195:18">fptr</name></decl>;</decl_stmt>
	<expr_stmt pos:start="196:9" pos:end="196:32"><expr pos:start="196:9" pos:end="196:31"><name pos:start="196:9" pos:end="196:12">fptr</name> <operator pos:start="196:14" pos:end="196:14">=</operator> <call pos:start="196:16" pos:end="196:31"><name pos:start="196:16" pos:end="196:20">fopen</name><argument_list pos:start="196:21" pos:end="196:31">(<argument pos:start="196:22" pos:end="196:26"><expr pos:start="196:22" pos:end="196:26"><name pos:start="196:22" pos:end="196:26">FNAME</name></expr></argument>,<argument pos:start="196:28" pos:end="196:30"><expr pos:start="196:28" pos:end="196:30"><literal type="string" pos:start="196:28" pos:end="196:30">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="197:9" pos:end="197:37"><expr pos:start="197:9" pos:end="197:36"><call pos:start="197:9" pos:end="197:36"><name pos:start="197:9" pos:end="197:15">fprintf</name><argument_list pos:start="197:16" pos:end="197:36">(<argument pos:start="197:17" pos:end="197:20"><expr pos:start="197:17" pos:end="197:20"><name pos:start="197:17" pos:end="197:20">fptr</name></expr></argument>,<argument pos:start="197:22" pos:end="197:27"><expr pos:start="197:22" pos:end="197:27"><literal type="string" pos:start="197:22" pos:end="197:27">"%d\n"</literal></expr></argument>, <argument pos:start="197:30" pos:end="197:35"><expr pos:start="197:30" pos:end="197:35"><name pos:start="197:30" pos:end="197:35">n_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="198:9" pos:end="198:21"><expr pos:start="198:9" pos:end="198:20"><call pos:start="198:9" pos:end="198:20"><name pos:start="198:9" pos:end="198:14">fclose</name><argument_list pos:start="198:15" pos:end="198:20">(<argument pos:start="198:16" pos:end="198:19"><expr pos:start="198:16" pos:end="198:19"><name pos:start="198:16" pos:end="198:19">fptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="200:9" pos:end="200:31"><expr pos:start="200:9" pos:end="200:30"><call pos:start="200:9" pos:end="200:30"><name pos:start="200:9" pos:end="200:14">printf</name><argument_list pos:start="200:15" pos:end="200:30">(<argument pos:start="200:16" pos:end="200:29"><expr pos:start="200:16" pos:end="200:29"><literal type="string" pos:start="200:16" pos:end="200:29">"Test input\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="201:9" pos:end="201:26"><expr pos:start="201:9" pos:end="201:25"><call pos:start="201:9" pos:end="201:25"><name pos:start="201:9" pos:end="201:13">srand</name><argument_list pos:start="201:14" pos:end="201:25">(<argument pos:start="201:15" pos:end="201:24"><expr pos:start="201:15" pos:end="201:24"><call pos:start="201:15" pos:end="201:24"><name pos:start="201:15" pos:end="201:18">time</name><argument_list pos:start="201:19" pos:end="201:24">(<argument pos:start="201:20" pos:end="201:23"><expr pos:start="201:20" pos:end="201:23"><name pos:start="201:20" pos:end="201:23">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line" pos:start="203:9" pos:end="203:120">//int input[16] = {-3,-1,0,4,5,6,7,8,-2,1,2,3,19,100, (rand() % (MAXINT - 8)) + 9,-(rand() % (MAXINT - 3)) - 4};</comment>
 	<comment type="line" pos:start="204:9" pos:end="204:50">//int tab[10] = {-3,-1,0,4,5,6,7,8,9,10}; </comment>
	
	<decl_stmt pos:start="206:9" pos:end="206:39"><decl pos:start="206:9" pos:end="206:38"><type pos:start="206:9" pos:end="206:11"><name pos:start="206:9" pos:end="206:11">int</name></type> <name pos:start="206:13" pos:end="206:18"><name pos:start="206:13" pos:end="206:15">tab</name><index pos:start="206:16" pos:end="206:18">[<expr pos:start="206:17" pos:end="206:17"><literal type="number" pos:start="206:17" pos:end="206:17">8</literal></expr>]</index></name> <init pos:start="206:20" pos:end="206:38">= <expr pos:start="206:22" pos:end="206:38"><block pos:start="206:22" pos:end="206:38">{<expr pos:start="206:23" pos:end="206:23"><literal type="number" pos:start="206:23" pos:end="206:23">1</literal></expr>,<expr pos:start="206:25" pos:end="206:25"><literal type="number" pos:start="206:25" pos:end="206:25">2</literal></expr>,<expr pos:start="206:27" pos:end="206:27"><literal type="number" pos:start="206:27" pos:end="206:27">3</literal></expr>,<expr pos:start="206:29" pos:end="206:29"><literal type="number" pos:start="206:29" pos:end="206:29">4</literal></expr>,<expr pos:start="206:31" pos:end="206:31"><literal type="number" pos:start="206:31" pos:end="206:31">5</literal></expr>,<expr pos:start="206:33" pos:end="206:33"><literal type="number" pos:start="206:33" pos:end="206:33">6</literal></expr>,<expr pos:start="206:35" pos:end="206:35"><literal type="number" pos:start="206:35" pos:end="206:35">7</literal></expr>,<expr pos:start="206:37" pos:end="206:37"><literal type="number" pos:start="206:37" pos:end="206:37">8</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt pos:start="207:9" pos:end="207:21"><decl pos:start="207:9" pos:end="207:20"><type pos:start="207:9" pos:end="207:11"><name pos:start="207:9" pos:end="207:11">int</name></type> <name pos:start="207:13" pos:end="207:16">size</name> <init pos:start="207:18" pos:end="207:20">= <expr pos:start="207:20" pos:end="207:20"><literal type="number" pos:start="207:20" pos:end="207:20">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="208:5" pos:end="208:14"><decl pos:start="208:5" pos:end="208:13"><type pos:start="208:5" pos:end="208:7"><name pos:start="208:5" pos:end="208:7">int</name></type> <name pos:start="208:9" pos:end="208:9">i</name> <init pos:start="208:11" pos:end="208:13">= <expr pos:start="208:13" pos:end="208:13"><literal type="number" pos:start="208:13" pos:end="208:13">0</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="209:5" pos:end="220:5">while<condition pos:start="209:10" pos:end="209:16">(<expr pos:start="209:11" pos:end="209:15"><name pos:start="209:11" pos:end="209:11">i</name> <operator pos:start="209:13" pos:end="209:13">&lt;</operator> <literal type="number" pos:start="209:15" pos:end="209:15">8</literal></expr>)</condition> <block pos:start="209:18" pos:end="220:5">{<block_content pos:start="210:17" pos:end="219:10"> <comment type="line" pos:start="209:20" pos:end="209:38">// Test good values</comment>
		<expr_stmt pos:start="210:17" pos:end="210:46"><expr pos:start="210:17" pos:end="210:45"><call pos:start="210:17" pos:end="210:45"><name pos:start="210:17" pos:end="210:22">printf</name><argument_list pos:start="210:23" pos:end="210:45">(<argument pos:start="210:24" pos:end="210:35"><expr pos:start="210:24" pos:end="210:35"><literal type="string" pos:start="210:24" pos:end="210:35">"input= %d "</literal></expr></argument>,<argument pos:start="210:37" pos:end="210:44"><expr pos:start="210:37" pos:end="210:44"><name pos:start="210:37" pos:end="210:44"><name pos:start="210:37" pos:end="210:41">input</name><index pos:start="210:42" pos:end="210:44">[<expr pos:start="210:43" pos:end="210:43"><name pos:start="210:43" pos:end="210:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt pos:start="211:7" pos:end="211:42"><decl pos:start="211:7" pos:end="211:41"><type pos:start="211:7" pos:end="211:9"><name pos:start="211:7" pos:end="211:9">int</name></type> <name pos:start="211:11" pos:end="211:11">y</name> <init pos:start="211:13" pos:end="211:41">= <expr pos:start="211:15" pos:end="211:41"><call pos:start="211:15" pos:end="211:41"><name pos:start="211:15" pos:end="211:20">search</name><argument_list pos:start="211:21" pos:end="211:41">(<argument pos:start="211:22" pos:end="211:24"><expr pos:start="211:22" pos:end="211:24"><name pos:start="211:22" pos:end="211:24">tab</name></expr></argument>, <argument pos:start="211:27" pos:end="211:30"><expr pos:start="211:27" pos:end="211:30"><name pos:start="211:27" pos:end="211:30">size</name></expr></argument>, <argument pos:start="211:33" pos:end="211:40"><expr pos:start="211:33" pos:end="211:40"><name pos:start="211:33" pos:end="211:40"><name pos:start="211:33" pos:end="211:37">input</name><index pos:start="211:38" pos:end="211:40">[<expr pos:start="211:39" pos:end="211:39"><name pos:start="211:39" pos:end="211:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt pos:start="212:17" pos:end="212:49"><expr pos:start="212:17" pos:end="212:48"><call pos:start="212:17" pos:end="212:48"><name pos:start="212:17" pos:end="212:22">printf</name><argument_list pos:start="212:23" pos:end="212:48">(<argument pos:start="212:24" pos:end="212:40"><expr pos:start="212:24" pos:end="212:40"><literal type="string" pos:start="212:24" pos:end="212:40">"output= %d\t%d "</literal></expr></argument>,<argument pos:start="212:42" pos:end="212:42"><expr pos:start="212:42" pos:end="212:42"><name pos:start="212:42" pos:end="212:42">y</name></expr></argument>,<argument pos:start="212:44" pos:end="212:47"><expr pos:start="212:44" pos:end="212:47"><name pos:start="212:44" pos:end="212:44">y</name><operator pos:start="212:45" pos:end="212:46">==</operator><name pos:start="212:47" pos:end="212:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="213:7" pos:end="216:17"><if pos:start="213:7" pos:end="213:47">if <condition pos:start="213:10" pos:end="213:17">(<expr pos:start="213:11" pos:end="213:16"><name pos:start="213:11" pos:end="213:11">y</name> <operator pos:start="213:13" pos:end="213:14">!=</operator> <name pos:start="213:16" pos:end="213:16">i</name></expr>)</condition> <block pos:start="213:19" pos:end="213:47">{<block_content pos:start="213:21" pos:end="213:45"> <expr_stmt pos:start="213:21" pos:end="213:45"><expr pos:start="213:21" pos:end="213:44"><call pos:start="213:21" pos:end="213:44"><name pos:start="213:21" pos:end="213:31">report_fail</name><argument_list pos:start="213:32" pos:end="213:44">(<argument pos:start="213:33" pos:end="213:40"><expr pos:start="213:33" pos:end="213:40"><name pos:start="213:33" pos:end="213:40"><name pos:start="213:33" pos:end="213:37">input</name><index pos:start="213:38" pos:end="213:40">[<expr pos:start="213:39" pos:end="213:39"><name pos:start="213:39" pos:end="213:39">i</name></expr>]</index></name></expr></argument>,<argument pos:start="213:42" pos:end="213:43"><expr pos:start="213:42" pos:end="213:43"><operator pos:start="213:42" pos:end="213:42">-</operator><literal type="number" pos:start="213:43" pos:end="213:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
		<else pos:start="214:17" pos:end="216:17">else<block pos:start="214:21" pos:end="216:17">{<block_content pos:start="215:17" pos:end="215:40">
		<expr_stmt pos:start="215:17" pos:end="215:40"><expr pos:start="215:17" pos:end="215:39"><call pos:start="215:17" pos:end="215:39"><name pos:start="215:17" pos:end="215:27">report_pass</name><argument_list pos:start="215:28" pos:end="215:39">(<argument pos:start="215:29" pos:end="215:36"><expr pos:start="215:29" pos:end="215:36"><name pos:start="215:29" pos:end="215:36"><name pos:start="215:29" pos:end="215:33">input</name><index pos:start="215:34" pos:end="215:36">[<expr pos:start="215:35" pos:end="215:35"><name pos:start="215:35" pos:end="215:35">i</name></expr>]</index></name></expr></argument>,<argument pos:start="215:38" pos:end="215:38"><expr pos:start="215:38" pos:end="215:38"><literal type="number" pos:start="215:38" pos:end="215:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt pos:start="217:17" pos:end="217:29"><expr pos:start="217:17" pos:end="217:28"><call pos:start="217:17" pos:end="217:28"><name pos:start="217:17" pos:end="217:22">printf</name><argument_list pos:start="217:23" pos:end="217:28">(<argument pos:start="217:24" pos:end="217:27"><expr pos:start="217:24" pos:end="217:27"><literal type="string" pos:start="217:24" pos:end="217:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
      <expr_stmt pos:start="219:7" pos:end="219:10"><expr pos:start="219:7" pos:end="219:9"><name pos:start="219:7" pos:end="219:7">i</name><operator pos:start="219:8" pos:end="219:9">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <while pos:start="221:5" pos:end="231:5">while <condition pos:start="221:11" pos:end="221:22">(<expr pos:start="221:12" pos:end="221:21"><name pos:start="221:12" pos:end="221:12">i</name> <operator pos:start="221:14" pos:end="221:14">&lt;</operator> <name pos:start="221:16" pos:end="221:21">n_test</name></expr>)</condition> <block pos:start="221:24" pos:end="231:5">{<block_content pos:start="222:9" pos:end="230:10"> <comment type="line" pos:start="221:26" pos:end="221:70">// Test random values outside the good values</comment>
	<expr_stmt pos:start="222:9" pos:end="222:38"><expr pos:start="222:9" pos:end="222:37"><call pos:start="222:9" pos:end="222:37"><name pos:start="222:9" pos:end="222:14">printf</name><argument_list pos:start="222:15" pos:end="222:37">(<argument pos:start="222:16" pos:end="222:27"><expr pos:start="222:16" pos:end="222:27"><literal type="string" pos:start="222:16" pos:end="222:27">"input= %d "</literal></expr></argument>,<argument pos:start="222:29" pos:end="222:36"><expr pos:start="222:29" pos:end="222:36"><name pos:start="222:29" pos:end="222:36"><name pos:start="222:29" pos:end="222:33">input</name><index pos:start="222:34" pos:end="222:36">[<expr pos:start="222:35" pos:end="222:35"><name pos:start="222:35" pos:end="222:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt pos:start="223:7" pos:end="223:42"><decl pos:start="223:7" pos:end="223:41"><type pos:start="223:7" pos:end="223:9"><name pos:start="223:7" pos:end="223:9">int</name></type> <name pos:start="223:11" pos:end="223:11">y</name> <init pos:start="223:13" pos:end="223:41">= <expr pos:start="223:15" pos:end="223:41"><call pos:start="223:15" pos:end="223:41"><name pos:start="223:15" pos:end="223:20">search</name><argument_list pos:start="223:21" pos:end="223:41">(<argument pos:start="223:22" pos:end="223:24"><expr pos:start="223:22" pos:end="223:24"><name pos:start="223:22" pos:end="223:24">tab</name></expr></argument>, <argument pos:start="223:27" pos:end="223:30"><expr pos:start="223:27" pos:end="223:30"><name pos:start="223:27" pos:end="223:30">size</name></expr></argument>, <argument pos:start="223:33" pos:end="223:40"><expr pos:start="223:33" pos:end="223:40"><name pos:start="223:33" pos:end="223:40"><name pos:start="223:33" pos:end="223:37">input</name><index pos:start="223:38" pos:end="223:40">[<expr pos:start="223:39" pos:end="223:39"><name pos:start="223:39" pos:end="223:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt pos:start="224:9" pos:end="224:42"><expr pos:start="224:9" pos:end="224:41"><call pos:start="224:9" pos:end="224:41"><name pos:start="224:9" pos:end="224:14">printf</name><argument_list pos:start="224:15" pos:end="224:41">(<argument pos:start="224:16" pos:end="224:32"><expr pos:start="224:16" pos:end="224:32"><literal type="string" pos:start="224:16" pos:end="224:32">"output= %d\t%d "</literal></expr></argument>,<argument pos:start="224:34" pos:end="224:34"><expr pos:start="224:34" pos:end="224:34"><name pos:start="224:34" pos:end="224:34">y</name></expr></argument>,<argument pos:start="224:36" pos:end="224:40"><expr pos:start="224:36" pos:end="224:40"><name pos:start="224:36" pos:end="224:36">y</name><operator pos:start="224:37" pos:end="224:38">==</operator><operator pos:start="224:39" pos:end="224:39">-</operator><literal type="number" pos:start="224:40" pos:end="224:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt pos:start="225:7" pos:end="228:17"><if pos:start="225:7" pos:end="225:48">if <condition pos:start="225:10" pos:end="225:18">(<expr pos:start="225:11" pos:end="225:17"><name pos:start="225:11" pos:end="225:11">y</name> <operator pos:start="225:13" pos:end="225:14">!=</operator> <operator pos:start="225:16" pos:end="225:16">-</operator><literal type="number" pos:start="225:17" pos:end="225:17">1</literal></expr>)</condition> <block pos:start="225:20" pos:end="225:48">{<block_content pos:start="225:22" pos:end="225:46"> <expr_stmt pos:start="225:22" pos:end="225:46"><expr pos:start="225:22" pos:end="225:45"><call pos:start="225:22" pos:end="225:45"><name pos:start="225:22" pos:end="225:32">report_fail</name><argument_list pos:start="225:33" pos:end="225:45">(<argument pos:start="225:34" pos:end="225:41"><expr pos:start="225:34" pos:end="225:41"><name pos:start="225:34" pos:end="225:41"><name pos:start="225:34" pos:end="225:38">input</name><index pos:start="225:39" pos:end="225:41">[<expr pos:start="225:40" pos:end="225:40"><name pos:start="225:40" pos:end="225:40">i</name></expr>]</index></name></expr></argument>,<argument pos:start="225:43" pos:end="225:44"><expr pos:start="225:43" pos:end="225:44"><operator pos:start="225:43" pos:end="225:43">-</operator><literal type="number" pos:start="225:44" pos:end="225:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if>
		<else pos:start="226:17" pos:end="228:17">else<block pos:start="226:21" pos:end="228:17">{<block_content pos:start="227:17" pos:end="227:40">
		<expr_stmt pos:start="227:17" pos:end="227:40"><expr pos:start="227:17" pos:end="227:39"><call pos:start="227:17" pos:end="227:39"><name pos:start="227:17" pos:end="227:27">report_pass</name><argument_list pos:start="227:28" pos:end="227:39">(<argument pos:start="227:29" pos:end="227:36"><expr pos:start="227:29" pos:end="227:36"><name pos:start="227:29" pos:end="227:36"><name pos:start="227:29" pos:end="227:33">input</name><index pos:start="227:34" pos:end="227:36">[<expr pos:start="227:35" pos:end="227:35"><name pos:start="227:35" pos:end="227:35">i</name></expr>]</index></name></expr></argument>,<argument pos:start="227:38" pos:end="227:38"><expr pos:start="227:38" pos:end="227:38"><literal type="number" pos:start="227:38" pos:end="227:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	<expr_stmt pos:start="229:9" pos:end="229:21"><expr pos:start="229:9" pos:end="229:20"><call pos:start="229:9" pos:end="229:20"><name pos:start="229:9" pos:end="229:14">printf</name><argument_list pos:start="229:15" pos:end="229:20">(<argument pos:start="229:16" pos:end="229:19"><expr pos:start="229:16" pos:end="229:19"><literal type="string" pos:start="229:16" pos:end="229:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt pos:start="230:7" pos:end="230:10"><expr pos:start="230:7" pos:end="230:9"><name pos:start="230:7" pos:end="230:7">i</name><operator pos:start="230:8" pos:end="230:9">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
	
</block_content>}</block></function>

<function pos:start="235:1" pos:end="246:1"><type pos:start="235:1" pos:end="235:3"><name pos:start="235:1" pos:end="235:3">int</name></type> <name pos:start="235:5" pos:end="235:8">main</name><parameter_list pos:start="235:9" pos:end="235:34">( <parameter pos:start="235:11" pos:end="235:18"><decl pos:start="235:11" pos:end="235:18"><type pos:start="235:11" pos:end="235:18"><name pos:start="235:11" pos:end="235:13">int</name></type> <name pos:start="235:15" pos:end="235:18">argc</name></decl></parameter>, <parameter pos:start="235:21" pos:end="235:32"><decl pos:start="235:21" pos:end="235:32"><type pos:start="235:21" pos:end="235:30"><name pos:start="235:21" pos:end="235:24">char</name> <modifier pos:start="235:26" pos:end="235:26">*</modifier></type><name pos:start="235:27" pos:end="235:32"><name pos:start="235:27" pos:end="235:30">argv</name><index pos:start="235:31" pos:end="235:32">[]</index></name></decl></parameter> )</parameter_list> <block pos:start="235:36" pos:end="246:1">{<block_content pos:start="240:9" pos:end="245:13">
    <comment type="line" pos:start="236:5" pos:end="236:26">//classical_test_01();</comment>
    <comment type="line" pos:start="237:5" pos:end="237:26">//classical_test_02();</comment>
    <comment type="line" pos:start="238:5" pos:end="238:20">//faulty_test();</comment>
    <comment type="line" pos:start="239:5" pos:end="239:20">//random_test();</comment>
	<if_stmt pos:start="240:9" pos:end="243:21"><if pos:start="240:9" pos:end="241:16">if<condition pos:start="240:11" pos:end="240:23">( <expr pos:start="240:13" pos:end="240:21"><name pos:start="240:13" pos:end="240:16">argc</name> <operator pos:start="240:18" pos:end="240:19">==</operator> <literal type="number" pos:start="240:21" pos:end="240:21">1</literal></expr> )</condition><block type="pseudo" pos:start="241:9" pos:end="241:16"><block_content pos:start="241:9" pos:end="241:16">
	<expr_stmt pos:start="241:9" pos:end="241:16"><expr pos:start="241:9" pos:end="241:15"><call pos:start="241:9" pos:end="241:15"><name pos:start="241:9" pos:end="241:13">test_</name><argument_list pos:start="241:14" pos:end="241:15">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else pos:start="242:9" pos:end="243:21">else<block type="pseudo" pos:start="243:9" pos:end="243:21"><block_content pos:start="243:9" pos:end="243:21">
	<expr_stmt pos:start="243:9" pos:end="243:21"><expr pos:start="243:9" pos:end="243:20"><call pos:start="243:9" pos:end="243:20"><name pos:start="243:9" pos:end="243:18">test_input</name><argument_list pos:start="243:19" pos:end="243:20">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="244:5" pos:end="244:38"><expr pos:start="244:5" pos:end="244:37"><call pos:start="244:5" pos:end="244:37"><name pos:start="244:5" pos:end="244:10">printf</name><argument_list pos:start="244:11" pos:end="244:37">(<argument pos:start="244:12" pos:end="244:36"><expr pos:start="244:12" pos:end="244:36"><literal type="string" pos:start="244:12" pos:end="244:36">"All tests succeeded !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="245:5" pos:end="245:13">return <expr pos:start="245:12" pos:end="245:12"><literal type="number" pos:start="245:12" pos:end="245:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
