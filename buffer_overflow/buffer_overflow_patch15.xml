<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="/media/kdam/Data/UCL/code/Project2/Project2/samples/buffer_overflow/buffer_overflow.c" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:18">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:18">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="2:1" pos:end="2:17">#<cpp:directive pos:start="2:2" pos:end="2:8">include</cpp:directive> <cpp:file pos:start="2:10" pos:end="2:17">&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="3:1" pos:end="3:19">#<cpp:directive pos:start="3:2" pos:end="3:8">include</cpp:directive> <cpp:file pos:start="3:10" pos:end="3:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:start="4:1" pos:end="4:19">#<cpp:directive pos:start="4:2" pos:end="4:8">include</cpp:directive> <cpp:file pos:start="4:10" pos:end="4:19">&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block" pos:start="6:1" pos:end="23:2">/*
0x..dec0  buf[0]
0x..dec1  buf[1]
0x..dec2  buf[2]
0x..dec3  buf[3]
0x..dec4  buf[4]
0x..dec5  buf[5]
0x..dec6  buf[6]
0x..dec7  buf[7]
0x..dec8  
0x..dec9  
0x..deca  
0x..decb  
0x..decc  |        0x64
0x..decd  |--&gt; x = 0x0
0x..dece  |        0x0
0x..decf  |        0x0
*/</comment>

<comment type="block" pos:start="25:1" pos:end="27:2">/*
compiled with : gcc -g -o buffer_overflow buffer_overflow.c -fno-stack-protector
*/</comment>

<function pos:start="29:1" pos:end="43:1"><type pos:start="29:1" pos:end="29:3"><name pos:start="29:1" pos:end="29:3">int</name></type> <name pos:start="29:5" pos:end="29:8">main</name><parameter_list pos:start="29:9" pos:end="29:31">(<parameter pos:start="29:10" pos:end="29:17"><decl pos:start="29:10" pos:end="29:17"><type pos:start="29:10" pos:end="29:17"><name pos:start="29:10" pos:end="29:12">int</name></type> <name pos:start="29:14" pos:end="29:17">argc</name></decl></parameter>, <parameter pos:start="29:20" pos:end="29:30"><decl pos:start="29:20" pos:end="29:30"><type pos:start="29:20" pos:end="29:30"><name pos:start="29:20" pos:end="29:23">char</name> <modifier pos:start="29:25" pos:end="29:25">*</modifier><modifier pos:start="29:26" pos:end="29:26">*</modifier></type><name pos:start="29:27" pos:end="29:30">argv</name></decl></parameter>)</parameter_list> <block pos:start="29:33" pos:end="43:1">{<block_content pos:start="30:5" pos:end="42:13">
    <decl_stmt pos:start="30:5" pos:end="30:15"><decl pos:start="30:5" pos:end="30:14"><type pos:start="30:5" pos:end="30:7"><name pos:start="30:5" pos:end="30:7">int</name></type> <name pos:start="30:9" pos:end="30:9">x</name> <init pos:start="30:11" pos:end="30:14">= <expr pos:start="30:13" pos:end="30:14"><literal type="number" pos:start="30:13" pos:end="30:14">42</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="31:5" pos:end="31:16"><decl pos:start="31:5" pos:end="31:15"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">char</name></type> <name pos:start="31:10" pos:end="31:15"><name pos:start="31:10" pos:end="31:12">buf</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:35"><expr pos:start="32:5" pos:end="32:34"><call pos:start="32:5" pos:end="32:34"><name pos:start="32:5" pos:end="32:10">memset</name><argument_list pos:start="32:11" pos:end="32:34">(<argument pos:start="32:12" pos:end="32:14"><expr pos:start="32:12" pos:end="32:14"><name pos:start="32:12" pos:end="32:14">buf</name></expr></argument>, <argument pos:start="32:17" pos:end="32:20"><expr pos:start="32:17" pos:end="32:20"><literal type="char" pos:start="32:17" pos:end="32:20">'\0'</literal></expr></argument>, <argument pos:start="32:23" pos:end="32:33"><expr pos:start="32:23" pos:end="32:33"><sizeof pos:start="32:23" pos:end="32:33">sizeof<argument_list pos:start="32:29" pos:end="32:33">(<argument pos:start="32:30" pos:end="32:32"><expr pos:start="32:30" pos:end="32:32"><name pos:start="32:30" pos:end="32:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><call pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:9">srand</name><argument_list pos:start="33:10" pos:end="33:21">(<argument pos:start="33:11" pos:end="33:20"><expr pos:start="33:11" pos:end="33:20"><call pos:start="33:11" pos:end="33:20"><name pos:start="33:11" pos:end="33:14">time</name><argument_list pos:start="33:15" pos:end="33:20">(<argument pos:start="33:16" pos:end="33:19"><expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="34:5" pos:end="34:24"><decl pos:start="34:5" pos:end="34:23"><type pos:start="34:5" pos:end="34:7"><name pos:start="34:5" pos:end="34:7">int</name></type> <name pos:start="34:9" pos:end="34:9">r</name> <init pos:start="34:11" pos:end="34:23">= <expr pos:start="34:13" pos:end="34:23"><call pos:start="34:13" pos:end="34:18"><name pos:start="34:13" pos:end="34:16">rand</name><argument_list pos:start="34:17" pos:end="34:18">()</argument_list></call> <operator pos:start="34:20" pos:end="34:20">%</operator> <literal type="number" pos:start="34:22" pos:end="34:23">14</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="34:26" pos:end="34:86">//overflow on x when r = 13   //no terminating \0 when r &gt;= 7</comment>
    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><call pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:10">printf</name><argument_list pos:start="35:11" pos:end="35:21">(<argument pos:start="35:12" pos:end="35:17"><expr pos:start="35:12" pos:end="35:17"><literal type="string" pos:start="35:12" pos:end="35:17">"%d\n"</literal></expr></argument>, <argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:56"><expr pos:start="36:5" pos:end="36:55"><call pos:start="36:5" pos:end="36:55"><name pos:start="36:5" pos:end="36:11">strncpy</name><argument_list pos:start="36:12" pos:end="36:55">(<argument pos:start="36:13" pos:end="36:15"><expr pos:start="36:13" pos:end="36:15"><name pos:start="36:13" pos:end="36:15">buf</name></expr></argument>, <argument pos:start="36:18" pos:end="36:51"><expr pos:start="36:18" pos:end="36:51"><literal type="string" pos:start="36:18" pos:end="36:51">"dddddddddddddddddddddddddddddddd"</literal></expr></argument>, <argument pos:start="36:54" pos:end="36:54"><expr pos:start="36:54" pos:end="36:54"><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="39:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:9">x</name> <operator pos:start="37:11" pos:end="37:12">==</operator> <literal type="number" pos:start="37:14" pos:end="37:16">100</literal></expr>)</condition> <block pos:start="37:19" pos:end="39:5">{<block_content pos:start="38:9" pos:end="38:25">
        <expr_stmt pos:start="38:9" pos:end="38:25"><expr pos:start="38:9" pos:end="38:24"><call pos:start="38:9" pos:end="38:24"><name pos:start="38:9" pos:end="38:14">printf</name><argument_list pos:start="38:15" pos:end="38:24">(<argument pos:start="38:16" pos:end="38:23"><expr pos:start="38:16" pos:end="38:23"><literal type="string" pos:start="38:16" pos:end="38:23">"secret"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="39:7" pos:end="41:5">else <block pos:start="39:12" pos:end="41:5">{<block_content pos:start="40:9" pos:end="40:28">
        <expr_stmt pos:start="40:9" pos:end="40:28"><expr pos:start="40:9" pos:end="40:27"><call pos:start="40:9" pos:end="40:27"><name pos:start="40:9" pos:end="40:14">printf</name><argument_list pos:start="40:15" pos:end="40:27">(<argument pos:start="40:16" pos:end="40:21"><expr pos:start="40:16" pos:end="40:21"><literal type="string" pos:start="40:16" pos:end="40:21">"%s\n"</literal></expr></argument>, <argument pos:start="40:24" pos:end="40:26"><expr pos:start="40:24" pos:end="40:26"><name pos:start="40:24" pos:end="40:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return pos:start="42:5" pos:end="42:13">return <expr pos:start="42:12" pos:end="42:12"><literal type="number" pos:start="42:12" pos:end="42:12">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
