<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="/media/kdam/Data/UCL/code/Project2/Project2/samples/binsearch/binsearch.c" pos:tabs="8"><comment type="line" pos:start="1:1" pos:end="1:65">// Code from http://www.cprover.org/cprover-manual/cbmc/tutorial/</comment>
<comment type="line" pos:start="2:1" pos:end="2:2">//</comment>
<function pos:start="3:1" pos:end="22:1"><type pos:start="3:1" pos:end="3:3"><name pos:start="3:1" pos:end="3:3">int</name></type> <name pos:start="3:5" pos:end="3:13">binsearch</name><parameter_list pos:start="3:14" pos:end="3:20">(<parameter pos:start="3:15" pos:end="3:19"><decl pos:start="3:15" pos:end="3:19"><type pos:start="3:15" pos:end="3:17"><name pos:start="3:15" pos:end="3:17">int</name></type> <name pos:start="3:19" pos:end="3:19">x</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="22:1">{<block_content pos:start="5:3" pos:end="21:12">
  <decl_stmt pos:start="5:3" pos:end="5:55"><decl pos:start="5:3" pos:end="5:54"><type pos:start="5:3" pos:end="5:5"><name pos:start="5:3" pos:end="5:5">int</name></type> <name pos:start="5:7" pos:end="5:11"><name pos:start="5:7" pos:end="5:7">a</name><index pos:start="5:8" pos:end="5:11">[<expr pos:start="5:9" pos:end="5:10"><literal type="number" pos:start="5:9" pos:end="5:10">16</literal></expr>]</index></name> <init pos:start="5:13" pos:end="5:54">= <expr pos:start="5:15" pos:end="5:54"><block pos:start="5:15" pos:end="5:54">{<expr pos:start="5:16" pos:end="5:16"><literal type="number" pos:start="5:16" pos:end="5:16">1</literal></expr>,<expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">2</literal></expr>,<expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">3</literal></expr>,<expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">4</literal></expr>,<expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">5</literal></expr>,<expr pos:start="5:26" pos:end="5:26"><literal type="number" pos:start="5:26" pos:end="5:26">6</literal></expr>,<expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">7</literal></expr>,<expr pos:start="5:30" pos:end="5:30"><literal type="number" pos:start="5:30" pos:end="5:30">8</literal></expr>,<expr pos:start="5:32" pos:end="5:32"><literal type="number" pos:start="5:32" pos:end="5:32">9</literal></expr>,<expr pos:start="5:34" pos:end="5:35"><literal type="number" pos:start="5:34" pos:end="5:35">10</literal></expr>,<expr pos:start="5:37" pos:end="5:38"><literal type="number" pos:start="5:37" pos:end="5:38">11</literal></expr>,<expr pos:start="5:40" pos:end="5:41"><literal type="number" pos:start="5:40" pos:end="5:41">12</literal></expr>,<expr pos:start="5:43" pos:end="5:44"><literal type="number" pos:start="5:43" pos:end="5:44">13</literal></expr>,<expr pos:start="5:46" pos:end="5:47"><literal type="number" pos:start="5:46" pos:end="5:47">14</literal></expr>,<expr pos:start="5:49" pos:end="5:50"><literal type="number" pos:start="5:49" pos:end="5:50">12</literal></expr>,<expr pos:start="5:52" pos:end="5:53"><literal type="number" pos:start="5:52" pos:end="5:53">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="6:3" pos:end="6:28"><decl pos:start="6:3" pos:end="6:16"><type pos:start="6:3" pos:end="6:8"><name pos:start="6:3" pos:end="6:8">signed</name></type> <name pos:start="6:10" pos:end="6:12">low</name> <init pos:start="6:14" pos:end="6:16">= <expr pos:start="6:16" pos:end="6:16"><literal type="number" pos:start="6:16" pos:end="6:16">0</literal></expr></init></decl>, <decl pos:start="6:19" pos:end="6:27"><type ref="prev" pos:start="6:3" pos:end="6:8"/><name pos:start="6:19" pos:end="6:22">high</name> <init pos:start="6:24" pos:end="6:27">= <expr pos:start="6:26" pos:end="6:27"><literal type="number" pos:start="6:26" pos:end="6:27">17</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt pos:start="7:3" pos:end="7:18"><decl pos:start="7:3" pos:end="7:17"><type pos:start="7:3" pos:end="7:8"><name pos:start="7:3" pos:end="7:8">signed</name></type> <name pos:start="7:10" pos:end="7:15">middle</name><init pos:start="7:16" pos:end="7:17">=<expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>;</decl_stmt>

  <while pos:start="9:3" pos:end="19:3">while<condition pos:start="9:8" pos:end="9:19">(<expr pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:11">low</name> <operator pos:start="9:13" pos:end="9:13">&lt;</operator> <name pos:start="9:15" pos:end="9:18">high</name></expr>)</condition>
  <block pos:start="10:3" pos:end="19:3">{<block_content pos:start="11:5" pos:end="18:20">
    <expr_stmt pos:start="11:5" pos:end="11:39"><expr pos:start="11:5" pos:end="11:38"><name pos:start="11:5" pos:end="11:10">middle</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <name pos:start="11:14" pos:end="11:16">low</name> <operator pos:start="11:18" pos:end="11:18">+</operator> <operator pos:start="11:20" pos:end="11:20">(</operator><operator pos:start="11:21" pos:end="11:21">(</operator><name pos:start="11:22" pos:end="11:25">high</name> <operator pos:start="11:27" pos:end="11:27">-</operator> <name pos:start="11:29" pos:end="11:31">low</name><operator pos:start="11:32" pos:end="11:32">)</operator> <operator pos:start="11:34" pos:end="11:35">&gt;&gt;</operator> <literal type="number" pos:start="11:37" pos:end="11:37">1</literal><operator pos:start="11:38" pos:end="11:38">)</operator></expr>;</expr_stmt>
    
    <if_stmt pos:start="13:5" pos:end="18:20"><if pos:start="13:5" pos:end="14:20">if<condition pos:start="13:7" pos:end="13:21">(<expr pos:start="13:8" pos:end="13:20"><name pos:start="13:8" pos:end="13:16"><name pos:start="13:8" pos:end="13:8">a</name><index pos:start="13:9" pos:end="13:16">[<expr pos:start="13:10" pos:end="13:15"><name pos:start="13:10" pos:end="13:15">middle</name></expr>]</index></name> <operator pos:start="13:18" pos:end="13:18">&lt;</operator> <name pos:start="13:20" pos:end="13:20">x</name></expr>)</condition><block type="pseudo" pos:start="14:7" pos:end="14:20"><if_stmt>if((middle == 0 | (0 &lt;= middle &amp; middle &lt; ((sizeof(a)/sizeof(*a)))))) { </if_stmt><block_content pos:start="14:7" pos:end="14:20">
      <expr_stmt pos:start="14:7" pos:end="14:20"><expr pos:start="14:7" pos:end="14:19"><name pos:start="14:7" pos:end="14:10">high</name> <operator pos:start="14:12" pos:end="14:12">=</operator> <name pos:start="14:14" pos:end="14:19">middle</name></expr>;</expr_stmt></block_content><expr>} </expr></block></if>
    <if type="elseif" pos:start="15:5" pos:end="16:23">else if<condition pos:start="15:12" pos:end="15:26">(<expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:21"><name pos:start="15:13" pos:end="15:13">a</name><index pos:start="15:14" pos:end="15:21">[<expr pos:start="15:15" pos:end="15:20"><name pos:start="15:15" pos:end="15:20">middle</name></expr>]</index></name> <operator pos:start="15:23" pos:end="15:23">&gt;</operator> <name pos:start="15:25" pos:end="15:25">x</name></expr>)</condition><block type="pseudo" pos:start="16:7" pos:end="16:23"><if_stmt>if((middle == 0 | (0 &lt;= middle &amp; middle &lt; ((sizeof(a)/sizeof(*a)))))) { </if_stmt><block_content pos:start="16:7" pos:end="16:23">
      <expr_stmt pos:start="16:7" pos:end="16:23"><expr pos:start="16:7" pos:end="16:22"><name pos:start="16:7" pos:end="16:9">low</name> <operator pos:start="16:11" pos:end="16:11">=</operator> <name pos:start="16:13" pos:end="16:18">middle</name> <operator pos:start="16:20" pos:end="16:20">+</operator> <literal type="number" pos:start="16:22" pos:end="16:22">1</literal></expr>;</expr_stmt></block_content><expr>} </expr></block></if>
    <else pos:start="17:5" pos:end="18:20">else<block type="pseudo" pos:start="18:7" pos:end="18:20"><block_content pos:start="18:7" pos:end="18:20"> <if_stmt>if((middle == 0 | (0 &lt;= middle &amp; middle &lt; ((sizeof(a)/sizeof(*a)))))) { </if_stmt><comment type="line" pos:start="17:10" pos:end="17:24">// a[middle]==x</comment>
      <return pos:start="18:7" pos:end="18:20">return <expr pos:start="18:14" pos:end="18:19"><name pos:start="18:14" pos:end="18:19">middle</name></expr>;</return><expr>} </expr></block_content></block></else></if_stmt>
  </block_content>}</block></while>

  <return pos:start="21:3" pos:end="21:12">return <expr pos:start="21:10" pos:end="21:11"><operator pos:start="21:10" pos:end="21:10">-</operator><literal type="number" pos:start="21:11" pos:end="21:11">1</literal></expr>;</return>
</block_content>}</block></function>

<function pos:start="24:1" pos:end="29:1"><type pos:start="24:1" pos:end="24:3"><name pos:start="24:1" pos:end="24:3">int</name></type> <name pos:start="24:5" pos:end="24:8">main</name><parameter_list pos:start="24:9" pos:end="24:10">()</parameter_list> <block pos:start="24:12" pos:end="29:1">{<block_content pos:start="25:9" pos:end="27:25">
	<decl_stmt pos:start="25:9" pos:end="25:14"><decl pos:start="25:9" pos:end="25:13"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:13">x</name></decl>;</decl_stmt>
<comment type="line" pos:start="26:1" pos:end="26:26">//	x = binsearch(18);</comment>
	<expr_stmt pos:start="27:9" pos:end="27:25"><expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:9">x</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:24"><name pos:start="27:13" pos:end="27:21">binsearch</name><argument_list pos:start="27:22" pos:end="27:24">(<argument pos:start="27:23" pos:end="27:23"><expr pos:start="27:23" pos:end="27:23"><literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line" pos:start="28:1" pos:end="28:25">//	x = binsearch(5);</comment>
</block_content>}</block></function>
</unit>
