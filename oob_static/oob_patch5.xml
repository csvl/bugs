<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="/media/kdam/Data/UCL/code/Project2/Project2/samples/oob_static/oob_static.c" pos:tabs="8"><cpp:include pos:start="1:1" pos:end="1:19">#<cpp:directive pos:start="1:2" pos:end="1:8">include</cpp:directive> <cpp:file pos:start="1:10" pos:end="1:19">&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="line" pos:start="3:1" pos:end="3:61">// Based on the example from http://cppcheck.sourceforge.net/</comment>
<function pos:start="4:1" pos:end="9:1"><type pos:start="4:1" pos:end="4:4"><name pos:start="4:1" pos:end="4:4">void</name></type> <name pos:start="4:6" pos:end="4:8">oob</name><parameter_list pos:start="4:9" pos:end="4:15">(<parameter pos:start="4:10" pos:end="4:14"><decl pos:start="4:10" pos:end="4:14"><type pos:start="4:10" pos:end="4:12"><name pos:start="4:10" pos:end="4:12">int</name></type> <name pos:start="4:14" pos:end="4:14">x</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="9:1">{<block_content pos:start="6:5" pos:end="8:21">
    <decl_stmt pos:start="6:5" pos:end="6:16"><decl pos:start="6:5" pos:end="6:15"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:15"><name pos:start="6:9" pos:end="6:11">buf</name><index pos:start="6:12" pos:end="6:15">[<expr pos:start="6:13" pos:end="6:14"><literal>1000</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:15"><expr pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:7">buf</name><index pos:start="7:8" pos:end="7:10">[<expr pos:start="7:9" pos:end="7:9"><name pos:start="7:9" pos:end="7:9">x</name></expr>]</index></name> <operator pos:start="7:12" pos:end="7:12">=</operator> <literal type="number" pos:start="7:14" pos:end="7:14">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="7:17" pos:end="7:27">// &lt;- ERROR</comment>
    <if_stmt pos:start="8:5" pos:end="8:21"><if pos:start="8:5" pos:end="8:21">if <condition pos:start="8:8" pos:end="8:18">(<expr pos:start="8:9" pos:end="8:17"><name pos:start="8:9" pos:end="8:9">x</name> <operator pos:start="8:11" pos:end="8:12">==</operator> <literal type="number" pos:start="8:14" pos:end="8:17">1000</literal></expr>)</condition> <block pos:start="8:20" pos:end="8:21">{<block_content/>}</block></if></if_stmt>
</block_content>}</block></function>

<function pos:start="11:1" pos:end="13:1"><type pos:start="11:1" pos:end="11:3"><name pos:start="11:1" pos:end="11:3">int</name></type> <name pos:start="11:5" pos:end="11:8">main</name><parameter_list pos:start="11:9" pos:end="11:10">()</parameter_list> <block pos:start="11:12" pos:end="13:1">{<block_content pos:start="12:9" pos:end="12:16">
	<expr_stmt pos:start="12:9" pos:end="12:16"><expr pos:start="12:9" pos:end="12:15"><call pos:start="12:9" pos:end="12:15"><name pos:start="12:9" pos:end="12:11">oob</name><argument_list pos:start="12:12" pos:end="12:15">(<argument pos:start="12:13" pos:end="12:14"><expr pos:start="12:13" pos:end="12:14"><literal type="number" pos:start="12:13" pos:end="12:14">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
